--- interpret.s	2007-04-20 21:12:06.000000000 +0100
+++ working.s	2007-04-20 21:11:55.000000000 +0100
@@ -584,45 +584,23 @@
 	ret
 .LFE121:
 	.size	find_line, .-find_line
-.globl get_line_number_info
-	.type	get_line_number_info, @function
-get_line_number_info:
-.LFB123:
-	pushq	%rbx
-.LCFI17:
-	movq	%rdi, %rbx
-	movq	%rsi, %rcx
-	movq	%rdi, %rdx
-	movq	current_prog(%rip), %rsi
-	movq	pc(%rip), %rdi
-	call	find_line
-	cmpq	$0, (%rbx)
-	jne	.L126
-	movq	current_prog(%rip), %rax
-	movq	(%rax), %rax
-	movq	%rax, (%rbx)
-.L126:
-	popq	%rbx
-	ret
-.LFE123:
-	.size	get_line_number_info, .-get_line_number_info
 .globl strpref
 	.type	strpref, @function
 strpref:
 .LFB134:

 	testq	%rsi, %rsi
-	je	.L299
+	je	.L295
 	movq	pc(%rip), %rdi
 	call	get_line_number
-.L299:
+.L295:
 	addq	$8, %rsp
 	ret
 .LFE128:
 	.size	get_line_number_if_any, .-get_line_number_if_any
+	.section	.rodata.str1.1
+.LC26:
+	.string	"lx lx"
+	.text
+.globl get_line_number_info
+	.type	get_line_number_info, @function
+get_line_number_info:
+.LFB123:
+	movq	%rbx, -16(%rsp)
+.LCFI64:
+	movq	%rbp, -8(%rsp)
+.LCFI65:
+	subq	$24, %rsp
+.LCFI66:
+	movq	%rdi, %rbp
+	movq	%rsi, %rbx
+	movl	$.LC26, %edi
+	call	puts
+	movq	%rbx, %rcx
+	movq	%rbp, %rdx
+	movq	current_prog(%rip), %rsi
+	movq	pc(%rip), %rdi
+	call	find_line
+	cmpq	$0, (%rbp)
+	jne	.L300
+	movq	current_prog(%rip), %rax
+	movq	(%rax), %rax
+	movq	%rax, (%rbp)
+.L300:
+	movq	8(%rsp), %rbx
+	movq	16(%rsp), %rbp
+	addq	$24, %rsp
+	ret
+.LFE123:
+	.size	get_line_number_info, .-get_line_number_info
 .globl push_shared_string
 	.type	push_shared_string, @function
 push_shared_string:
 .LFB92:
 	pushq	%rbx
-.LCFI65:
+.LCFI67:
 	movq	%rdi, %rbx
 	movq	sp(%rip), %rax
 	addq	$16, %rax
@@ -1807,11 +1820,11 @@
 share_and_push_string:
 .LFB58:
 	movq	%rbx, -16(%rsp)
-.LCFI66:
+.LCFI68:
 	movq	%rbp, -8(%rsp)
-.LCFI67:
+.LCFI69:
 	subq	$24, %rsp
-.LCFI68:
+.LCFI70:
 	movq	%rdi, %rbp
 	movq	sp(%rip), %rax
 	addq	$16, %rax
@@ -1843,13 +1856,13 @@
 find_function_by_name:
 .LFB107:
 	movq	%rbx, -24(%rsp)
-.LCFI69:
+.LCFI71:
 	movq	%rbp, -16(%rsp)
-.LCFI70:
+.LCFI72:
 	movq	%r12, -8(%rsp)
-.LCFI71:
+.LCFI73:
 	subq	$24, %rsp
-.LCFI72:
+.LCFI74:
 	movq	%rdi, %rbp
 	movq	%rsi, %rdi
 	movq	%rdx, %r12
@@ -1875,10 +1888,10 @@
 	.size	find_function_by_name, .-find_function_by_name
 	.section	.rodata.str1.8,"aMS",@progbits,1
 	.align 8
-.LC26:
+.LC27:
 	.string	"Bad argument %d in call to %s() in %s\nExpected: %s Got %s.\n"
 	.section	.rodata.str1.1
-.LC27:
+.LC28:
 	.string	"driver"
 	.text
 .globl check_co_args2
@@ -1886,19 +1899,19 @@
 check_co_args2:
 .LFB109:
 	pushq	%r15
-.LCFI73:
+.LCFI75:
 	pushq	%r14
-.LCFI74:
+.LCFI76:
 	pushq	%r13
-.LCFI75:
+.LCFI77:
 	pushq	%r12
-.LCFI76:
+.LCFI78:
 	pushq	%rbp
-.LCFI77:
+.LCFI79:
 	pushq	%rbx
-.LCFI78:
+.LCFI80:
 	subq	$1080, %rsp
-.LCFI79:
+.LCFI81:
 	movq	%rdi, %r15
 	movq	%rdx, 24(%rsp)
 	movq	%rcx, 16(%rsp)
@@ -1937,7 +1950,7 @@
 	movq	%rax, %r9
 	movq	16(%rsp), %r8
 	movq	24(%rsp), %rcx
-	movl	$.LC26, %esi
+	movl	$.LC27, %esi
 	movq	%rbp, %rdi
 	movl	$0, %eax
 	call	sprintf
@@ -1958,7 +1971,7 @@
 	movl	$1, %ecx
 	leaq	32(%rsp), %rdx
 	movl	$0, %esi
-	movl	$.LC27, %edi
+	movl	$.LC28, %edi
 	call	smart_log
 .L316:
 	addq	$1, %r14
@@ -1976,7 +1989,7 @@
 .LFE109:
 	.size	check_co_args2, .-check_co_args2
 	.section	.rodata.str1.1
-.LC28:
+.LC29:
 	.string	"function>"
 	.text
 .globl add_slash
@@ -1984,16 +1997,16 @@
 add_slash:
 .LFB65:
 	pushq	%rbp
-.LCFI80:
+.LCFI82:
 	pushq	%rbx
-.LCFI81:
+.LCFI83:
 	subq	$8, %rsp
-.LCFI82:
+.LCFI84:
 	movq	%rdi, %rbp
 	cmpb	$60, (%rdi)
 	jne	.L328
 	leaq	1(%rdi), %rsi
-	movl	$.LC28, %edi
+	movl	$.LC29, %edi
 	movl	$10, %ecx
 	cld
 	repz
@@ -2030,18 +2043,18 @@
 .LFE65:
 	.size	add_slash, .-add_slash
 	.section	.rodata.str1.1
-.LC29:
+.LC30:
 	.string	"()"
 	.section	.rodata.str1.8
 	.align 8
-.LC30:
+.LC31:
 	.string	"Bad argument %d to %s%s\nExpected: "
 	.section	.rodata.str1.1
-.LC31:
-	.string	" or "
 .LC32:
-	.string	" Got: "
+	.string	" or "
 .LC33:
+	.string	" Got: "
+.LC34:
 	.string	".\n"
 	.text
 .globl bad_argument
@@ -2049,19 +2062,19 @@
 bad_argument:
 .LFB80:
 	pushq	%r15
-.LCFI83:
+.LCFI85:
 	pushq	%r14
-.LCFI84:
+.LCFI86:
 	pushq	%r13
-.LCFI85:
+.LCFI87:
 	pushq	%r12
-.LCFI86:
+.LCFI88:
 	pushq	%rbp
-.LCFI87:
+.LCFI89:
 	pushq	%rbx
-.LCFI88:
+.LCFI90:
 	subq	$24, %rsp
-.LCFI89:
+.LCFI91:
 	movq	%rdi, %r15
 	movl	%esi, %ebp
 	movl	%edx, %r13d
@@ -2069,7 +2082,7 @@
 	movq	%rsp, %rdi
 	call	outbuf_zero
 	cmpl	$119, %r12d
-	movl	$.LC29, %ebx
+	movl	$.LC30, %ebx
 	movl	$.LC9, %eax
 	cmovle	%rax, %rbx
 	movl	%r12d, %edi
@@ -2078,7 +2091,7 @@
 	movq	%rsp, %rdi
 	movq	%rbx, %r8
 	movl	%r13d, %edx
-	movl	$.LC30, %esi
+	movl	$.LC31, %esi
 	movl	$0, %eax
 	call	outbuf_addv
 	movl	$0, %r13d
@@ -2092,7 +2105,7 @@
 	movb	$1, %r13b
 	jmp	.L342
 .L340:
-	movl	$.LC31, %esi
+	movl	$.LC32, %esi
 	movq	%rsp, %rdi
 	call	outbuf_add
 .L342:
@@ -2104,7 +2117,7 @@
 	addq	$1, %rbx
 	cmpq	$9, %rbx
 	jne	.L337
-	movl	$.LC32, %esi
+	movl	$.LC33, %esi
 	movq	%rsp, %rdi
 	call	outbuf_add
 	movl	$0, %r8d
@@ -2113,7 +2126,7 @@
 	movq	%rsp, %rsi
 	movq	%r15, %rdi
 	call	svalue_to_string
-	movl	$.LC33, %esi
+	movl	$.LC34, %esi
 	movq	%rsp, %rdi
 	call	outbuf_add
 	movq	%rsp, %rdi
@@ -2135,19 +2148,19 @@
 process_efun_callback:
 .LFB62:
 	movq	%rbx, -48(%rsp)
-.LCFI90:
+.LCFI92:
 	movq	%rbp, -40(%rsp)
-.LCFI91:
+.LCFI93:
 	movq	%r12, -32(%rsp)
-.LCFI92:
+.LCFI94:
 	movq	%r13, -24(%rsp)
-.LCFI93:
+.LCFI95:
 	movq	%r14, -16(%rsp)
-.LCFI94:
+.LCFI96:
 	movq	%r15, -8(%rsp)
-.LCFI95:
+.LCFI97:
 	subq	$56, %rsp
-.LCFI96:
+.LCFI98:
 	movl	%edi, %r13d
 	movq	%rsi, %rbx
 	movl	%edx, %r14d
@@ -2246,7 +2259,7 @@
 free_string_svalue:
 .LFB59:
 	subq	$8, %rsp
-.LCFI97:
+.LCFI99:
 	movq	8(%rdi), %rdx
 	testb	$1, 2(%rdi)
 	je	.L370
@@ -2297,13 +2310,13 @@
 unlink_string_svalue:
 .LFB60:
 	movq	%rbx, -24(%rsp)
-.LCFI98:
+.LCFI100:
 	movq	%rbp, -16(%rsp)
-.LCFI99:
+.LCFI101:
 	movq	%r12, -8(%rsp)
-.LCFI100:
+.LCFI102:
 	subq	$24, %rsp
-.LCFI101:
+.LCFI103:
 	movq	%rdi, %rbp
 	movzwl	2(%rdi), %eax
 	cmpw	$1, %ax
@@ -2369,28 +2382,28 @@
 	.size	unlink_string_svalue, .-unlink_string_svalue
 	.section	.rodata.str1.8
 	.align 8
-.LC34:
+.LC35:
 	.string	"Format string cannot end in '%%' in sscanf()\n"
 	.align 8
-.LC35:
+.LC36:
 	.string	"Too few arguments to sscanf()\n"
 	.align 8
-.LC36:
+.LC37:
 	.string	"Bad regexp format: '%%%s' in sscanf format string\n"
 	.align 8
-.LC37:
+.LC38:
 	.string	"Bad type : '%%%c' in sscanf() format string\n"
 	.align 8
-.LC38:
+.LC39:
 	.string	"Too few arguments to sscanf().\n"
 	.align 8
-.LC39:
+.LC40:
 	.string	"Illegal to have 2 adjacent %%s's in format string in sscanf()\n"
 	.align 8
-.LC40:
+.LC41:
 	.string	"Bad regexp format : '%%%s' in sscanf format string\n"
 	.align 8
-.LC41:
+.LC42:
 	.string	"Format string can't end in '%%'.\n"
 	.text
 .globl inter_sscanf
@@ -2398,19 +2411,19 @@
 inter_sscanf:
 .LFB129:
 	pushq	%r15
-.LCFI102:
+.LCFI104:
 	pushq	%r14
-.LCFI103:
+.LCFI105:
 	pushq	%r13
-.LCFI104:
+.LCFI106:
 	pushq	%r12
-.LCFI105:
+.LCFI107:
 	pushq	%rbp
-.LCFI106:
+.LCFI108:
 	pushq	%rbx
-.LCFI107:
+.LCFI109:
 	subq	$72, %rsp
-.LCFI108:
+.LCFI110:
 	movq	%rdi, %r14
 	movq	%rsi, %rbx
 	movq	%rdx, %rbp
@@ -2458,7 +2471,7 @@
 	movq	%rbx, %rbp
 	testb	%al, %al
 	jne	.L395
-	movl	$.LC34, %edi
+	movl	$.LC35, %edi
 	call	error
 	movzbl	(%rbx), %edx
 	testb	%dl, %dl
@@ -2503,7 +2516,7 @@
 	cmpb	$37, %dl
 	.p2align 4,,5
 	je	.L405
-	movl	$.LC35, %edi
+	movl	$.LC36, %edi
 	movl	$0, %eax
 	call	error
 .L403:
@@ -2600,7 +2613,7 @@
 	jmp	.L546
 .L422:
 	movq	%rbp, %rsi
-	movl	$.LC36, %edi
+	movl	$.LC37, %edi
 	movl	$0, %eax
 	call	error
 .L423:
@@ -2680,7 +2693,7 @@
 	jmp	.L417
 .L407:
 	movsbl	-1(%rbp),%esi
-	movl	$.LC37, %edi
+	movl	$.LC38, %edi
 	movl	$0, %eax
 	call	error
 .L411:
@@ -2718,7 +2731,7 @@
 	jle	.L444
 	cmpb	$37, (%rbp)
 	je	.L446
-	movl	$.LC38, %edi
+	movl	$.LC39, %edi
 	movl	$0, %eax
 	call	error
 .L444:
@@ -2782,7 +2795,7 @@
 	.p2align 4,,2
 	jmp	.L463
 .L454:
-	movl	$.LC39, %edi
+	movl	$.LC40, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L547
@@ -2883,7 +2896,7 @@
 	jmp	.L548
 .L479:
 	movq	%rbp, %rsi
-	movl	$.LC40, %edi
+	movl	$.LC41, %edi
 	movl	$0, %eax
 	call	error
 .L480:
@@ -2984,12 +2997,12 @@
 	leaq	1(%r13), %rbp
 	jmp	.L417
 .L449:
-	movl	$.LC41, %edi
+	movl	$.LC42, %edi
 	movl	$0, %eax
 	call	error
 .L448:
 	movsbl	-1(%rbp),%esi
-	movl	$.LC37, %edi
+	movl	$.LC38, %edi
 	movl	$0, %eax
 	call	error
 .L459:
@@ -3189,11 +3202,11 @@
 function_exists:
 .LFB118:
 	movq	%rbx, -16(%rsp)
-.LCFI109:
+.LCFI111:
 	movq	%rbp, -8(%rsp)
-.LCFI110:
+.LCFI112:
 	subq	$40, %rsp
-.LCFI111:
+.LCFI113:
 	movq	%rsi, %rbx
 	movl	%edx, %ebp
 	cmpb	$35, (%rdi)
@@ -3233,25 +3246,25 @@
 .LFE118:
 	.size	function_exists, .-function_exists
 	.section	.rodata.str1.1
-.LC42:
-	.string	"function"
 .LC43:
-	.string	"CATCH"
+	.string	"function"
 .LC44:
-	.string	"<fake>"
+	.string	"CATCH"
 .LC45:
-	.string	"program"
+	.string	"<fake>"
 .LC46:
-	.string	"object"
+	.string	"program"
 .LC47:
-	.string	"file"
+	.string	"object"
 .LC48:
-	.string	"line"
+	.string	"file"
 .LC49:
-	.string	"arguments"
+	.string	"line"
 .LC50:
-	.string	"locals"
+	.string	"arguments"
 .LC51:
+	.string	"locals"
+.LC52:
 	.string	"%d\n"
 	.text
 .globl get_svalue_trace
@@ -3259,19 +3272,19 @@
 get_svalue_trace:
 .LFB127:
 	pushq	%r15
-.LCFI112:
+.LCFI114:
 	pushq	%r14
-.LCFI113:
+.LCFI115:
 	pushq	%r13
-.LCFI114:
+.LCFI116:
 	pushq	%r12
-.LCFI115:
+.LCFI117:
 	pushq	%rbp
-.LCFI116:
+.LCFI118:
 	pushq	%rbx
-.LCFI117:
+.LCFI119:
 	subq	$88, %rsp
-.LCFI118:
+.LCFI120:
 	movl	$-1, 48(%rsp)
 	movl	$the_null_array, %r15d
 	cmpq	$0, current_prog(%rip)
@@ -3322,20 +3335,20 @@
 	leaq	48(%rsp), %r8
 	call	get_trace_details
 	movq	56(%rsp), %rdx
-	movl	$.LC42, %esi
+	movl	$.LC43, %esi
 	movq	%r12, %rdi
 	call	add_mapping_string
 	jmp	.L569
 .L572:
-	movl	$.LC43, %edx
-	movl	$.LC42, %esi
+	movl	$.LC44, %edx
+	movl	$.LC43, %esi
 	movq	%r12, %rdi
 	call	add_mapping_string
 	movl	$-1, 52(%rsp)
 	jmp	.L569
 .L573:
-	movl	$.LC44, %edx
-	movl	$.LC42, %esi
+	movl	$.LC45, %edx
+	movl	$.LC43, %esi
 	movq	%r12, %rdi
 	call	add_mapping_string
 	movl	$-1, 52(%rsp)
@@ -3353,7 +3366,7 @@
 	movl	$0, %edx
 	call	svalue_to_string
 	movq	40(%rsp), %rdx
-	movl	$.LC42, %esi
+	movl	$.LC43, %esi
 	movq	%r12, %rdi
 	call	add_mapping_string
 	movq	40(%rsp), %rax
@@ -3382,11 +3395,11 @@
 	movq	(%rax), %rdi
 	call	add_slash
 	movq	%rax, %rdx
-	movl	$.LC45, %esi
+	movl	$.LC46, %esi
 	movq	%r12, %rdi
 	call	add_mapping_malloced_string
 	movq	control_stack+96(%r13), %rdx
-	movl	$.LC46, %esi
+	movl	$.LC47, %esi
 	movq	%r12, %rdi
 	call	add_mapping_object
 	movq	control_stack+112(%r13), %rbx
@@ -3403,11 +3416,11 @@
 	movq	72(%rsp), %rdi
 	call	add_slash
 	movq	%rax, %rdx
-	movl	$.LC47, %esi
+	movl	$.LC48, %esi
 	movq	%r12, %rdi
 	call	add_mapping_malloced_string
 	movslq	68(%rsp),%rdx
-	movl	$.LC48, %esi
+	movl	$.LC49, %esi
 	movq	%r12, %rdi
 	call	add_mapping_pair
 	movl	52(%rsp), %edi
@@ -3485,7 +3498,7 @@
 	jg	.L581
 .L579:
 	movq	%rbx, %rdx
-	movl	$.LC49, %esi
+	movl	$.LC50, %esi
 	movq	%r12, %rdi
 	call	add_mapping_array
 	subw	$1, (%rbx)
@@ -3571,7 +3584,7 @@
 	jg	.L601
 .L599:
 	movq	%rbx, %rdx
-	movl	$.LC50, %esi
+	movl	$.LC51, %esi
 	movq	%r12, %rdi
 	call	add_mapping_array
 	subw	$1, (%rbx)
@@ -3617,20 +3630,20 @@
 	movq	current_prog(%rip), %rdi
 	call	get_trace_details
 	movq	56(%rsp), %rdx
-	movl	$.LC42, %esi
+	movl	$.LC43, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_string
 	jmp	.L616
 .L619:
-	movl	$.LC43, %edx
-	movl	$.LC42, %esi
+	movl	$.LC44, %edx
+	movl	$.LC43, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_string
 	movl	$-1, 52(%rsp)
 	jmp	.L616
 .L620:
-	movl	$.LC44, %edx
-	movl	$.LC42, %esi
+	movl	$.LC45, %edx
+	movl	$.LC43, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_string
 	movl	$-1, 52(%rsp)
@@ -3648,7 +3661,7 @@
 	movl	$0, %edx
 	call	svalue_to_string
 	movq	24(%rsp), %rdx
-	movl	$.LC42, %esi
+	movl	$.LC43, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_string
 	movq	24(%rsp), %rax
@@ -3676,11 +3689,11 @@
 	movq	(%rax), %rdi
 	call	add_slash
 	movq	%rax, %rdx
-	movl	$.LC45, %esi
+	movl	$.LC46, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_malloced_string
 	movq	current_object(%rip), %rdx
-	movl	$.LC46, %esi
+	movl	$.LC47, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_object
 	leaq	68(%rsp), %rsi
@@ -3690,17 +3703,17 @@
 	movl	$0, %eax
 	call	printf
 	movl	68(%rsp), %esi
-	movl	$.LC51, %edi
+	movl	$.LC52, %edi
 	movl	$0, %eax
 	call	printf
 	movq	72(%rsp), %rdi
 	call	add_slash
 	movq	%rax, %rdx
-	movl	$.LC47, %esi
+	movl	$.LC48, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_malloced_string
 	movslq	68(%rsp),%rdx
-	movl	$.LC48, %esi
+	movl	$.LC49, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_pair
 	movl	52(%rsp), %edi
@@ -3776,7 +3789,7 @@
 	jl	.L626
 .L624:
 	movq	%rbx, %rdx
-	movl	$.LC49, %esi
+	movl	$.LC50, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_array
 	subw	$1, (%rbx)
@@ -3861,7 +3874,7 @@
 	jg	.L646
 .L644:
 	movq	%rbx, %rdx
-	movl	$.LC50, %esi
+	movl	$.LC51, %esi
 	movq	%rbp, %rdi
 	call	add_mapping_array
 	subw	$1, (%rbx)
@@ -3970,11 +3983,11 @@
 push_some_svalues:
 .LFB68:
 	pushq	%rbp
-.LCFI119:
+.LCFI121:
 	pushq	%rbx
-.LCFI120:
+.LCFI122:
 	subq	$8, %rsp
-.LCFI121:
+.LCFI123:
 	movl	%esi, %ebp
 	leaq	16(%rdi), %rbx
 	jmp	.L687
@@ -4057,7 +4070,7 @@
 .LFE68:
 	.size	push_some_svalues, .-push_some_svalues
 	.section	.rodata.str1.1
-.LC52:
+.LC53:
 	.string	"free_svalue"
 	.text
 .globl kill_ref
@@ -4065,7 +4078,7 @@
 kill_ref:
 .LFB48:
 	pushq	%rbx
-.LCFI122:
+.LCFI124:
 	movq	%rdi, %rbx
 	cmpw	$32, 40(%rdi)
 	jne	.L708
@@ -4181,7 +4194,7 @@
 	jmp	.L733
 .L730:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L715
 .L734:
@@ -4267,7 +4280,7 @@
 int_free_svalue:
 .LFB61:
 	subq	$8, %rsp
-.LCFI123:
+.LCFI125:
 	movzwl	(%rdi), %eax
 	cmpw	$4, %ax
 	jne	.L753
@@ -4354,7 +4367,7 @@
 	jmp	.L770
 .L767:
 	movq	8(%rdi), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L778
 .L771:
@@ -4411,11 +4424,11 @@
 pop_n_elems:
 .LFB76:
 	pushq	%rbp
-.LCFI124:
+.LCFI126:
 	pushq	%rbx
-.LCFI125:
+.LCFI127:
 	subq	$8, %rsp
-.LCFI126:
+.LCFI128:
 	movl	%edi, %ebp
 	testl	%edi, %edi
 	je	.L783
@@ -4440,11 +4453,11 @@
 restore_context:
 .LFB138:
 	pushq	%rbp
-.LCFI127:
+.LCFI129:
 	pushq	%rbx
-.LCFI128:
+.LCFI130:
 	subq	$8, %rsp
-.LCFI129:
+.LCFI131:
 	movq	%rdi, %rbx
 	movl	$0, _in_reference_allowed(%rip)
 	movq	cgsp(%rip), %rax
@@ -4504,38 +4517,38 @@
 .LFE138:
 	.size	restore_context, .-restore_context
 	.section	.rodata.str1.1
-.LC53:
-	.string	"--- trace ---\n"
 .LC54:
-	.string	"heart_beat"
+	.string	"--- trace ---\n"
 .LC55:
-	.string	"<catch>"
+	.string	"heart_beat"
 .LC56:
-	.string	"arguments were ("
+	.string	"<catch>"
 .LC57:
-	.string	","
+	.string	"arguments were ("
 .LC58:
-	.string	"%s"
+	.string	","
 .LC59:
-	.string	")\n"
+	.string	"%s"
 .LC60:
+	.string	")\n"
+.LC61:
 	.string	"locals were: "
 	.section	.rodata.str1.8
 	.align 8
-.LC61:
+.LC62:
 	.string	"'%15s' in '/%20s' ('/%20s') %s\n"
 	.section	.rodata.str1.1
-.LC62:
+.LC63:
 	.string	"'%s' in '/%20s' ('/%20s') %s\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC63:
+.LC64:
 	.string	"'     <fake>' in '/%20s' ('/%20s') %s\n"
 	.align 8
-.LC64:
+.LC65:
 	.string	"'          CATCH' in '/%20s' ('/%20s') %s\n"
 	.section	.rodata.str1.1
-.LC65:
+.LC66:
 	.string	"--- end trace ---\n"
 	.text
 .globl dump_trace
@@ -4543,19 +4556,19 @@
 dump_trace:
 .LFB126:
 	pushq	%r15
-.LCFI130:
+.LCFI132:
 	pushq	%r14
-.LCFI131:
+.LCFI133:
 	pushq	%r13
-.LCFI132:
+.LCFI134:
 	pushq	%r12
-.LCFI133:
+.LCFI135:
 	pushq	%rbp
-.LCFI134:
+.LCFI136:
 	pushq	%rbx
-.LCFI135:
+.LCFI137:
 	subq	$328, %rsp
-.LCFI136:
+.LCFI138:
 	movl	%edi, 12(%rsp)
 	movl	$-1, 308(%rsp)
 	movl	$-1, 304(%rsp)
@@ -4592,7 +4605,7 @@
 	movl	$0, %eax
 	call	last_instructions
 .L815:
-	movl	$.LC53, %edi
+	movl	$.LC54, %edi
 	movl	$0, %eax
 	call	debug_message
 	movl	$control_stack, %ebx
@@ -4639,7 +4652,7 @@
 	movq	(%rax), %rsi
 	call	dump_trace_line
 	movq	312(%rsp), %rsi
-	movl	$.LC54, %edi
+	movl	$.LC55, %edi
 	movl	$11, %ecx
 	cld
 	repz
@@ -4706,7 +4719,7 @@
 	movq	8(%rax), %rdx
 	movq	32(%r13), %rax
 	movq	(%rax), %rsi
-	movl	$.LC44, %edi
+	movl	$.LC45, %edi
 	call	dump_trace_line
 	movl	$-1, 308(%rsp)
 	jmp	.L830
@@ -4719,7 +4732,7 @@
 	movq	8(%rax), %rdx
 	movq	32(%r13), %rax
 	movq	(%rax), %rsi
-	movl	$.LC55, %edi
+	movl	$.LC56, %edi
 	call	dump_trace_line
 	movl	$-1, 308(%rsp)
 	jmp	.L830
@@ -4727,7 +4740,7 @@
 	cmpl	$-1, 308(%rsp)
 	je	.L830
 	movq	56(%r13), %rbx
-	movl	$.LC56, %edi
+	movl	$.LC57, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	%rbx, %rbp
@@ -4738,7 +4751,7 @@
 .L834:
 	testl	%r12d, %r12d
 	je	.L835
-	movl	$.LC57, %edi
+	movl	$.LC58, %edi
 	movl	$0, %eax
 	call	debug_message
 .L835:
@@ -4754,7 +4767,7 @@
 	movq	%rbp, %rdi
 	call	svalue_to_string
 	movq	40(%rsp), %rsi
-	movl	$.LC58, %edi
+	movl	$.LC59, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	40(%rsp), %rax
@@ -4776,7 +4789,7 @@
 	cmpl	%r12d, 308(%rsp)
 	jg	.L834
 .L833:
-	movl	$.LC59, %edi
+	movl	$.LC60, %edi
 	movl	$0, %eax
 	call	debug_message
 .L830:
@@ -4788,7 +4801,7 @@
 	movslq	%eax,%rbx
 	salq	$4, %rbx
 	addq	56(%r13), %rbx
-	movl	$.LC60, %edi
+	movl	$.LC61, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	%rbx, %rbp
@@ -4799,7 +4812,7 @@
 .L843:
 	testl	%r12d, %r12d
 	je	.L844
-	movl	$.LC57, %edi
+	movl	$.LC58, %edi
 	movl	$0, %eax
 	call	debug_message
 .L844:
@@ -4815,7 +4828,7 @@
 	movq	%rbp, %rdi
 	call	svalue_to_string
 	movq	40(%rsp), %rsi
-	movl	$.LC58, %edi
+	movl	$.LC59, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	40(%rsp), %rax
@@ -4881,7 +4894,7 @@
 	movq	%rax, %r8
 	movq	current_prog(%rip), %rax
 	movq	(%rax), %rdx
-	movl	$.LC61, %edi
+	movl	$.LC62, %edi
 	movl	$0, %eax
 	call	debug_message
 	jmp	.L847
@@ -4906,7 +4919,7 @@
 	movq	%rax, %r8
 	movq	current_prog(%rip), %rax
 	movq	(%rax), %rdx
-	movl	$.LC62, %edi
+	movl	$.LC63, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	40(%rsp), %rax
@@ -4939,7 +4952,7 @@
 	movq	8(%rax), %rdx
 	movq	current_prog(%rip), %rax
 	movq	(%rax), %rsi
-	movl	$.LC63, %edi
+	movl	$.LC64, %edi
 	movl	$0, %eax
 	call	debug_message
 	movl	$-1, 308(%rsp)
@@ -4953,7 +4966,7 @@
 	movq	8(%rax), %rdx
 	movq	current_prog(%rip), %rax
 	movq	(%rax), %rsi
-	movl	$.LC64, %edi
+	movl	$.LC65, %edi
 	movl	$0, %eax
 	call	debug_message
 	movl	$-1, 308(%rsp)
@@ -4961,7 +4974,7 @@
 .L847:
 	cmpl	$-1, 308(%rsp)
 	je	.L853
-	movl	$.LC56, %edi
+	movl	$.LC57, %edi
 	movl	$0, %eax
 	call	debug_message
 	cmpl	$0, 308(%rsp)
@@ -4973,7 +4986,7 @@
 .L858:
 	testl	%ebx, %ebx
 	je	.L859
-	movl	$.LC57, %edi
+	movl	$.LC58, %edi
 	movl	$0, %eax
 	call	debug_message
 .L859:
@@ -4989,7 +5002,7 @@
 	movq	%r12, %rsi
 	call	svalue_to_string
 	movq	24(%rsp), %rsi
-	movl	$.LC58, %edi
+	movl	$.LC59, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	24(%rsp), %rax
@@ -5011,7 +5024,7 @@
 	cmpl	%ebx, 308(%rsp)
 	jg	.L858
 .L855:
-	movl	$.LC59, %edi
+	movl	$.LC60, %edi
 	movl	$0, %eax
 	call	debug_message
 .L853:
@@ -5023,7 +5036,7 @@
 	movslq	%eax,%rbx
 	salq	$4, %rbx
 	addq	fp(%rip), %rbx
-	movl	$.LC60, %edi
+	movl	$.LC61, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	%rbx, %rbp
@@ -5034,7 +5047,7 @@
 .L866:
 	testl	%r12d, %r12d
 	je	.L867
-	movl	$.LC57, %edi
+	movl	$.LC58, %edi
 	movl	$0, %eax
 	call	debug_message
 .L867:
@@ -5050,7 +5063,7 @@
 	movq	%rbp, %rdi
 	call	svalue_to_string
 	movq	24(%rsp), %rsi
-	movl	$.LC58, %edi
+	movl	$.LC59, %edi
 	movl	$0, %eax
 	call	debug_message
 	movq	24(%rsp), %rax
@@ -5076,7 +5089,7 @@
 	movl	$0, %eax
 	call	debug_message
 .L861:
-	movl	$.LC65, %edi
+	movl	$.LC66, %edi
 	movl	$0, %eax
 	call	debug_message
 	testl	%r14d, %r14d
@@ -5104,11 +5117,11 @@
 reset_machine:
 .LFB130:
 	pushq	%rbp
-.LCFI137:
+.LCFI139:
 	pushq	%rbx
-.LCFI138:
+.LCFI140:
 	subq	$8, %rsp
-.LCFI139:
+.LCFI141:
 	movq	$control_stack-80, csp(%rip)
 	testl	%edi, %edi
 	je	.L874
@@ -5142,15 +5155,15 @@
 setup_variables:
 .LFB94:
 	pushq	%r13
-.LCFI140:
+.LCFI142:
 	pushq	%r12
-.LCFI141:
+.LCFI143:
 	pushq	%rbp
-.LCFI142:
+.LCFI144:
 	pushq	%rbx
-.LCFI143:
+.LCFI145:
 	subq	$8, %rsp
-.LCFI144:
+.LCFI146:
 	movl	%esi, %r12d
 	movl	%edx, %r13d
 	movl	%edi, %ebp
@@ -5241,15 +5254,15 @@
 setup_new_frame:
 .LFB96:
 	pushq	%r14
-.LCFI145:
+.LCFI147:
 	pushq	%r13
-.LCFI146:
+.LCFI148:
 	pushq	%r12
-.LCFI147:
+.LCFI149:
 	pushq	%rbp
-.LCFI148:
+.LCFI150:
 	pushq	%rbx
-.LCFI149:
+.LCFI151:
 	movl	$0, variable_index_offset(%rip)
 	movl	$0, function_index_offset(%rip)
 	movq	current_prog(%rip), %r9
@@ -5530,15 +5543,15 @@
 setup_inherited_frame:
 .LFB97:
 	pushq	%r14
-.LCFI150:
+.LCFI152:
 	pushq	%r13
-.LCFI151:
+.LCFI153:
 	pushq	%r12
-.LCFI152:
+.LCFI154:
 	pushq	%rbp
-.LCFI153:
+.LCFI155:
 	pushq	%rbx
-.LCFI154:
+.LCFI156:
 	movq	current_prog(%rip), %r9
 	movq	56(%r9), %rcx
 	movslq	%edi,%rax
@@ -5814,13 +5827,13 @@
 	.size	setup_inherited_frame, .-setup_inherited_frame
 	.section	.rodata.str1.8
 	.align 8
-.LC66:
+.LC67:
 	.string	"Illegal rhs to array range lvalue\n"
 	.align 8
-.LC67:
+.LC68:
 	.string	"Illegal rhs to string range lvalue.\n"
 	.align 8
-.LC68:
+.LC69:
 	.string	"Illegal rhs to buffer range lvalue.\n"
 	.text
 .globl assign_lvalue_range
@@ -5828,19 +5841,19 @@
 assign_lvalue_range:
 .LFB75:
 	pushq	%r15
-.LCFI155:
+.LCFI157:
 	pushq	%r14
-.LCFI156:
+.LCFI158:
 	pushq	%r13
-.LCFI157:
+.LCFI159:
 	pushq	%r12
-.LCFI158:
+.LCFI160:
 	pushq	%rbp
-.LCFI159:
+.LCFI161:
 	pushq	%rbx
-.LCFI160:
+.LCFI162:
 	subq	$56, %rsp
-.LCFI161:
+.LCFI163:
 	movq	%rdi, %rbp
 	movl	global_lvalue_range(%rip), %ebx
 	movl	global_lvalue_range+4(%rip), %eax
@@ -5860,7 +5873,7 @@
 	cmpw	$8, (%rdi)
 	.p2align 4,,7
 	je	.L1011
-	movl	$.LC66, %edi
+	movl	$.LC67, %edi
 	movl	$0, %eax
 	call	error
 .L1011:
@@ -6168,7 +6181,7 @@
 .L1008:
 	cmpw	$4, (%rdi)
 	je	.L1082
-	movl	$.LC67, %edi
+	movl	$.LC68, %edi
 	movl	$0, %eax
 	call	error
 .L1082:
@@ -6262,7 +6275,7 @@
 .L1010:
 	cmpw	$256, (%rdi)
 	je	.L1094
-	movl	$.LC68, %edi
+	movl	$.LC69, %edi
 	movl	$0, %eax
 	call	error
 .L1094:
@@ -6333,11 +6346,11 @@
 check_for_destr:
 .LFB100:
 	pushq	%r12
-.LCFI162:
+.LCFI164:
 	pushq	%rbp
-.LCFI163:
+.LCFI165:
 	pushq	%rbx
-.LCFI164:
+.LCFI166:
 	movq	%rdi, %r12
 	movzwl	2(%rdi), %ebx
 	leal	-1(%rbx), %eax
@@ -6440,7 +6453,7 @@
 	jmp	.L1126
 .L1123:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1111
 .L1127:
@@ -6510,7 +6523,7 @@
 pop_stack:
 .LFB71:
 	subq	$8, %rsp
-.LCFI165:
+.LCFI167:
 	movq	sp(%rip), %rcx
 	leaq	-16(%rcx), %rax
 	movq	%rax, sp(%rip)
@@ -6599,7 +6612,7 @@
 	jmp	.L1154
 .L1151:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1162
 .L1155:
@@ -6656,11 +6669,11 @@
 assign_svalue:
 .LFB67:
 	pushq	%rbp
-.LCFI166:
+.LCFI168:
 	pushq	%rbx
-.LCFI167:
+.LCFI169:
 	subq	$8, %rsp
-.LCFI168:
+.LCFI170:
 	movq	%rdi, %rbx
 	movq	%rsi, %rbp
 	movzwl	(%rdi), %eax
@@ -6748,7 +6761,7 @@
 	jmp	.L1181
 .L1178:
 	movq	8(%rdi), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1166
 .L1182:
@@ -6862,11 +6875,11 @@
 free_some_svalues:
 .LFB64:
 	pushq	%r12
-.LCFI169:
+.LCFI171:
 	pushq	%rbp
-.LCFI170:
+.LCFI172:
 	pushq	%rbx
-.LCFI171:
+.LCFI173:
 	movq	%rdi, %r12
 	movl	%esi, %ebp
 	leal	-1(%rbp), %eax
@@ -6961,7 +6974,7 @@
 	jmp	.L1224
 .L1221:
 	movq	8(%rbx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1209
 .L1225:
@@ -7027,7 +7040,7 @@
 pop_3_elems:
 .LFB78:
 	subq	$8, %rsp
-.LCFI172:
+.LCFI174:
 	movq	sp(%rip), %rcx
 	leaq	-16(%rcx), %rax
 	movq	%rax, sp(%rip)
@@ -7116,7 +7129,7 @@
 	jmp	.L1252
 .L1249:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1237
 .L1253:
@@ -7251,7 +7264,7 @@
 	jmp	.L1277
 .L1274:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1262
 .L1278:
@@ -7386,7 +7399,7 @@
 	jmp	.L1302
 .L1299:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1310
 .L1303:
@@ -7443,7 +7456,7 @@
 pop_2_elems:
 .LFB77:
 	subq	$8, %rsp
-.LCFI173:
+.LCFI175:
 	movq	sp(%rip), %rcx
 	leaq	-16(%rcx), %rax
 	movq	%rax, sp(%rip)
@@ -7532,7 +7545,7 @@
 	jmp	.L1329
 .L1326:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1314
 .L1330:
@@ -7667,7 +7680,7 @@
 	jmp	.L1354
 .L1351:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1362
 .L1355:
@@ -7724,19 +7737,19 @@
 copy_lvalue_range:
 .LFB74:
 	pushq	%r15
-.LCFI174:
+.LCFI176:
 	pushq	%r14
-.LCFI175:
+.LCFI177:
 	pushq	%r13
-.LCFI176:
+.LCFI178:
 	pushq	%r12
-.LCFI177:
+.LCFI179:
 	pushq	%rbp
-.LCFI178:
+.LCFI180:
 	pushq	%rbx
-.LCFI179:
+.LCFI181:
 	subq	$56, %rsp
-.LCFI180:
+.LCFI182:
 	movq	%rdi, %rbp
 	movl	global_lvalue_range(%rip), %ebx
 	movl	global_lvalue_range+4(%rip), %eax
@@ -7756,7 +7769,7 @@
 	cmpw	$8, (%rdi)
 	.p2align 4,,7
 	je	.L1368
-	movl	$.LC66, %edi
+	movl	$.LC67, %edi
 	movl	$0, %eax
 	call	error
 .L1368:
@@ -7870,7 +7883,7 @@
 	jmp	.L1395
 .L1392:
 	movq	-8(%rbx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1380
 .L1396:
@@ -8249,7 +8262,7 @@
 .L1365:
 	cmpw	$4, (%rdi)
 	je	.L1476
-	movl	$.LC67, %edi
+	movl	$.LC68, %edi
 	movl	$0, %eax
 	call	error
 .L1476:
@@ -8383,7 +8396,7 @@
 .L1367:
 	cmpw	$256, (%rdi)
 	je	.L1495
-	movl	$.LC68, %edi
+	movl	$.LC69, %edi
 	movl	$0, %eax
 	call	error
 .L1495:
@@ -8454,31 +8467,31 @@
 	.size	copy_lvalue_range, .-copy_lvalue_range
 	.section	.rodata.str1.8
 	.align 8
-.LC69:
+.LC70:
 	.string	"Mapping exceeded maximum allowed size of %d.\n"
 	.section	.rodata.str1.1
-.LC70:
+.LC71:
 	.string	"Illegal type of index\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC71:
+.LC72:
 	.string	"Index out of bounds in string index lvalue.\n"
 	.section	.rodata.str1.1
-.LC72:
-	.string	"Buffer index out of bounds.\n"
 .LC73:
-	.string	"Array index out of bounds\n"
+	.string	"Buffer index out of bounds.\n"
 .LC74:
+	.string	"Array index out of bounds\n"
+.LC75:
 	.string	"Value being indexed is zero.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC75:
+.LC76:
 	.string	"Cannot index value of type '%s'.\n"
 	.align 8
-.LC76:
+.LC77:
 	.string	"Illegal to make char lvalue from assigned string\n"
 	.section	.rodata.str1.1
-.LC77:
+.LC78:
 	.string	"Array index out of bounds.\n"
 	.text
 .globl push_indexed_lvalue
@@ -8486,13 +8499,13 @@
 push_indexed_lvalue:
 .LFB72:
 	movq	%rbx, -24(%rsp)
-.LCFI181:
+.LCFI183:
 	movq	%rbp, -16(%rsp)
-.LCFI182:
+.LCFI184:
 	movq	%r12, -8(%rsp)
-.LCFI183:
+.LCFI185:
 	subq	$24, %rsp
-.LCFI184:
+.LCFI186:
 	movl	%edi, %ebx
 	movq	sp(%rip), %rdx
 	movzwl	(%rdx), %eax
@@ -8512,7 +8525,7 @@
 	testq	%rax, %rax
 	jne	.L1512
 	movl	config_int+52(%rip), %esi
-	movl	$.LC69, %edi
+	movl	$.LC70, %edi
 	movl	$0, %eax
 	call	error
 .L1512:
@@ -8602,7 +8615,7 @@
 	jmp	.L1531
 .L1528:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1516
 .L1532:
@@ -8662,7 +8675,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L1540
-	movl	$.LC70, %edi
+	movl	$.LC71, %edi
 	movl	$0, %eax
 	call	error
 .L1540:
@@ -8713,7 +8726,7 @@
 	testl	%r12d, %r12d
 	jns	.L1552
 .L1554:
-	movl	$.LC71, %edi
+	movl	$.LC72, %edi
 	movl	$0, %eax
 	call	error
 .L1552:
@@ -8745,7 +8758,7 @@
 	testl	%r12d, %r12d
 	jns	.L1557
 .L1559:
-	movl	$.LC72, %edi
+	movl	$.LC73, %edi
 	movl	$0, %eax
 	call	error
 .L1557:
@@ -8778,7 +8791,7 @@
 	testl	%r12d, %r12d
 	jns	.L1562
 .L1564:
-	movl	$.LC73, %edi
+	movl	$.LC74, %edi
 	movl	$0, %eax
 	call	error
 .L1562:
@@ -8799,14 +8812,14 @@
 	jne	.L1565
 	cmpq	$0, 8(%rbp)
 	jne	.L1565
-	movl	$.LC74, %edi
+	movl	$.LC75, %edi
 	movl	$0, %eax
 	call	error
 .L1565:
 	movswl	(%rbp),%edi
 	call	type_name
 	movq	%rax, %rsi
-	movl	$.LC75, %edi
+	movl	$.LC76, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L1617
@@ -8824,7 +8837,7 @@
 	testq	%rax, %rax
 	jne	.L1571
 	movl	config_int+52(%rip), %esi
-	movl	$.LC69, %edi
+	movl	$.LC70, %edi
 	movl	$0, %eax
 	call	error
 .L1571:
@@ -8923,7 +8936,7 @@
 	jmp	.L1590
 .L1587:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1575
 .L1591:
@@ -8978,7 +8991,7 @@
 .L1568:
 	cmpw	$2, -16(%rdx)
 	je	.L1598
-	movl	$.LC70, %edi
+	movl	$.LC71, %edi
 	movl	$0, %eax
 	call	error
 .L1598:
@@ -8991,7 +9004,7 @@
 	je	.L1603
 	cmpw	$4, %ax
 	jne	.L1600
-	movl	$.LC76, %edi
+	movl	$.LC77, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L1617
@@ -9009,7 +9022,7 @@
 	testl	%ebp, %ebp
 	jns	.L1606
 .L1608:
-	movl	$.LC72, %edi
+	movl	$.LC73, %edi
 	movl	$0, %eax
 	call	error
 .L1606:
@@ -9048,7 +9061,7 @@
 	testl	%ebp, %ebp
 	jns	.L1611
 .L1613:
-	movl	$.LC77, %edi
+	movl	$.LC78, %edi
 	movl	$0, %eax
 	call	error
 .L1611:
@@ -9074,7 +9087,7 @@
 	jne	.L1614
 	cmpq	$0, 8(%rdx)
 	jne	.L1614
-	movl	$.LC74, %edi
+	movl	$.LC75, %edi
 	movl	$0, %eax
 	call	error
 .L1614:
@@ -9082,7 +9095,7 @@
 	movswl	(%rax),%edi
 	call	type_name
 	movq	%rax, %rsi
-	movl	$.LC75, %edi
+	movl	$.LC76, %edi
 	movl	$0, %eax
 	call	error
 .L1617:
@@ -9095,166 +9108,166 @@
 	.size	push_indexed_lvalue, .-push_indexed_lvalue
 	.section	.rodata.str1.8
 	.align 8
-.LC78:
+.LC79:
 	.string	"object /%s: eval_cost too big %d\n"
 	.align 8
-.LC79:
+.LC80:
 	.string	"Too long evaluation. Execution aborted.\n"
 	.align 8
-.LC81:
+.LC82:
 	.string	"Strings cannot contain 0 bytes.\n"
 	.section	.rodata.str1.1
-.LC82:
-	.string	"++ of non-numeric argument\n"
 .LC83:
-	.string	"-- of non-numeric argument\n"
+	.string	"++ of non-numeric argument\n"
 .LC84:
+	.string	"-- of non-numeric argument\n"
+.LC85:
 	.string	"Reference is invalid.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC85:
+.LC86:
 	.string	"Non-reference value passed as reference argument.\n"
 	.section	.rodata.str1.1
-.LC86:
-	.string	"do_loop_cond:1"
 .LC87:
+	.string	"do_loop_cond:1"
+.LC88:
 	.string	"do_loop_cond:2"
 	.section	.rodata.str1.8
 	.align 8
-.LC88:
+.LC89:
 	.string	"2nd argument to < is not numeric when the 1st is.\n"
 	.align 8
-.LC89:
+.LC90:
 	.string	"2nd argument to < is not string when the 1st is.\n"
 	.section	.rodata.str1.1
-.LC90:
+.LC91:
 	.string	"Bad 1st argument to <.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC91:
+.LC92:
 	.string	"Right side of < is a number, left side is not.\n"
 	.align 8
-.LC92:
+.LC93:
 	.string	"Bad type argument to +. Had %s and %s.\n"
 	.section	.rodata.str1.1
-.LC93:
+.LC94:
 	.string	"%ld"
 	.section	.rodata.str1.8
 	.align 8
-.LC94:
+.LC95:
 	.string	"Maximum string length exceeded in concatenation.\n"
 	.section	.rodata.str1.1
-.LC95:
+.LC96:
 	.string	"Out of memory!\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC96:
+.LC97:
 	.string	"Bad type argument to +.  Had %s and %s.\n"
 	.section	.rodata.str1.1
-.LC97:
+.LC98:
 	.string	"%f"
 	.section	.rodata.str1.8
 	.align 8
-.LC98:
-	.string	"Bad type argument to +. Had %s and %s\n"
-	.align 8
 .LC99:
-	.string	"Left hand side of += is a number (or zero); right side is not a number.\n"
+	.string	"Bad type argument to +. Had %s and %s\n"
 	.align 8
 .LC100:
-	.string	"Bad right type to += of char lvalue.\n"
+	.string	"Left hand side of += is a number (or zero); right side is not a number.\n"
 	.align 8
 .LC101:
+	.string	"Bad right type to += of char lvalue.\n"
+	.align 8
+.LC102:
 	.string	"Item being expanded with ... is not an array\n"
 	.section	.rodata.str1.1
-.LC102:
+.LC103:
 	.string	"Illegal rhs to char lvalue\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC103:
+.LC104:
 	.string	"Undefined function called: %s\n"
 	.section	.rodata.str1.1
-.LC104:
-	.string	"Bad argument to ~\n"
 .LC105:
+	.string	"Bad argument to ~\n"
+.LC106:
 	.string	"Division by zero\n"
-.LC107:
+.LC108:
 	.string	"Division by 0.0\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC108:
+.LC109:
 	.string	"Tried to take a member of something that isn't a class.\n"
 	.align 8
-.LC109:
+.LC110:
 	.string	"Class has no corresponding member.\n"
 	.align 8
-.LC110:
+.LC111:
 	.string	"Buffer indexes must be integers.\n"
 	.align 8
-.LC111:
+.LC112:
 	.string	"String indexes must be integers.\n"
 	.section	.rodata.str1.1
-.LC112:
+.LC113:
 	.string	"String index out of bounds.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC113:
+.LC114:
 	.string	"Array indexes must be integers.\n"
 	.align 8
-.LC114:
+.LC115:
 	.string	"Array index must be positive or zero.\n"
 	.align 8
-.LC115:
+.LC116:
 	.string	"Indexing a buffer with an illegal type.\n"
 	.align 8
-.LC116:
+.LC117:
 	.string	"Indexing a string with an illegal type.\n"
 	.align 8
-.LC117:
+.LC118:
 	.string	"Indexing an array with an illegal type\n"
 	.section	.rodata.str1.1
-.LC118:
+.LC119:
 	.string	"Modulus by zero.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC119:
+.LC120:
 	.string	"Args to * are not compatible.\n"
 	.section	.rodata.str1.1
-.LC121:
-	.string	"Bad argument to unary minus\n"
 .LC122:
+	.string	"Bad argument to unary minus\n"
+.LC123:
 	.string	"Range lvalue on illegal type\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC123:
+.LC124:
 	.string	"Illegal 2nd index type to range lvalue\n"
 	.align 8
-.LC124:
+.LC125:
 	.string	"The 2nd index to range lvalue must be >= -1 and < sizeof(indexed value)\n"
 	.align 8
-.LC125:
+.LC126:
 	.string	"Illegal 1st index type to range lvalue\n"
 	.align 8
-.LC126:
+.LC127:
 	.string	"The 1st index to range lvalue must be >= 0 and <= sizeof(indexed value)\n"
 	.section	.rodata.str1.1
-.LC127:
-	.string	"Bad left type to -.\n"
 .LC128:
+	.string	"Bad left type to -.\n"
+.LC129:
 	.string	"Bad right type to -.\n"
 	.section	.rodata.str1.8
 	.align 8
-.LC129:
+.LC130:
 	.string	"Arguments to - do not have compatible types.\n"
 	.section	.rodata.str1.1
-.LC130:
+.LC131:
 	.string	"Trying to put %s in %s\n"
 	.section	.rodata.cst4
 	.align 4
-.LC80:
+.LC81:
 	.long	1065353216
 	.align 4
-.LC106:
+.LC107:
 	.long	0
 	.text
 .globl eval_instruction
@@ -9262,19 +9275,19 @@
 eval_instruction:
 .LFB103:
 	pushq	%r15
-.LCFI185:
+.LCFI187:
 	pushq	%r14
-.LCFI186:
+.LCFI188:
 	pushq	%r13
-.LCFI187:
+.LCFI189:
 	pushq	%r12
-.LCFI188:
+.LCFI190:
 	pushq	%rbp
-.LCFI189:
+.LCFI191:
 	pushq	%rbx
-.LCFI190:
+.LCFI192:
 	subq	$136, %rsp
-.LCFI191:
+.LCFI193:
 	movq	csp(%rip), %rax
 	orw	$8, (%rax)
 	movq	%rdi, pc(%rip)
@@ -9319,13 +9332,13 @@
 	movq	current_object(%rip), %rax
 	movq	8(%rax), %rsi
 	movl	max_cost(%rip), %edx
-	movl	$.LC78, %edi
+	movl	$.LC79, %edi
 	movl	$0, %eax
 	call	debug_message
 	movl	max_cost(%rip), %edi
 	call	set_eval
 	movl	$1, max_eval_error(%rip)
-	movl	$.LC79, %edi
+	movl	$.LC80, %edi
 	movl	$0, %eax
 	call	error
 .L1623:
@@ -9821,7 +9834,7 @@
 	.p2align 4,,5
 	jmp	.L3363
 .L1820:
-	movss	.LC80(%rip), %xmm0
+	movss	.LC81(%rip), %xmm0
 	addss	8(%rdx), %xmm0
 	movss	%xmm0, 8(%rdx)
 	jmp	.L3363
@@ -9831,7 +9844,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$-1, (%rax)
 	jne	.L1822
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L1822:
@@ -9839,7 +9852,7 @@
 	addb	$1, (%rax)
 	jmp	.L3363
 .L1818:
-	movl	$.LC82, %edi
+	movl	$.LC83, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -9865,11 +9878,11 @@
 	movss	8(%rcx), %xmm0
 	cvttss2siq	%xmm0, %rax
 	movq	%rax, 120(%rsp)
-	subss	.LC80(%rip), %xmm0
+	subss	.LC81(%rip), %xmm0
 	movss	%xmm0, 8(%rcx)
 	jmp	.L1827
 .L1828:
-	movl	$.LC83, %edi
+	movl	$.LC84, %edi
 	movl	$0, %eax
 	call	error
 .L1827:
@@ -9997,7 +10010,7 @@
 	movq	%rax, 8(%rsp)
 	testq	%rax, %rax
 	jne	.L1846
-	movl	$.LC84, %edi
+	movl	$.LC85, %edi
 	call	error
 .L1846:
 	movq	8(%rsp), %rdx
@@ -10025,7 +10038,7 @@
 	movq	%rdx, 8(%rax)
 	jmp	.L3363
 .L1844:
-	movl	$.LC85, %edi
+	movl	$.LC86, %edi
 	movl	$0, %eax
 	call	error
 .L1848:
@@ -10195,12 +10208,12 @@
 	movq	%rdx, 8(%rax)
 	jmp	.L3363
 .L1885:
-	movl	$.LC84, %edi
+	movl	$.LC85, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
 .L1883:
-	movl	$.LC85, %edi
+	movl	$.LC86, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -10590,7 +10603,7 @@
 	jmp	.L1929
 .L1926:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L1911
 .L1930:
@@ -10770,12 +10783,12 @@
 .L1957:
 	cmpw	$128, %dx
 	jne	.L1960
-	movss	.LC80(%rip), %xmm0
+	movss	.LC81(%rip), %xmm0
 	addss	8(%rax), %xmm0
 	movss	%xmm0, 8(%rax)
 	jmp	.L1959
 .L1960:
-	movl	$.LC82, %edi
+	movl	$.LC83, %edi
 	movl	$0, %eax
 	call	error
 .L1959:
@@ -10856,7 +10869,7 @@
 	movq	8(%rbp), %rdi
 	testb	$16, 2(%rdi)
 	je	.L1973
-	movl	$.LC86, %esi
+	movl	$.LC87, %esi
 	call	free_object
 	movq	const0u(%rip), %rax
 	movq	%rax, (%rbp)
@@ -10868,7 +10881,7 @@
 	movq	8(%rbx), %rdi
 	testb	$16, 2(%rdi)
 	je	.L1976
-	movl	$.LC87, %esi
+	movl	$.LC88, %esi
 	call	free_object
 	movq	const0u(%rip), %rax
 	movq	%rax, (%rbx)
@@ -10894,15 +10907,15 @@
 	.p2align 4,,5
 	jne	.L1983
 .L1981:
-	movl	$.LC88, %edi
+	movl	$.LC89, %edi
 	movl	$0, %eax
 	call	error
 .L1984:
-	movl	$.LC89, %edi
+	movl	$.LC90, %edi
 	movl	$0, %eax
 	call	error
 .L1983:
-	movl	$.LC90, %edi
+	movl	$.LC91, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L1985
@@ -10999,7 +11012,7 @@
 	movq	%rax, pc(%rip)
 	jmp	.L3363
 .L1992:
-	movl	$.LC91, %edi
+	movl	$.LC92, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -11076,7 +11089,7 @@
 	movq	8(%rbp), %rdi
 	testb	$16, 2(%rdi)
 	je	.L2006
-	movl	$.LC86, %esi
+	movl	$.LC87, %esi
 	call	free_object
 	movq	const0u(%rip), %rax
 	movq	%rax, (%rbp)
@@ -11088,7 +11101,7 @@
 	movq	8(%rbx), %rdi
 	testb	$16, 2(%rdi)
 	je	.L2009
-	movl	$.LC87, %esi
+	movl	$.LC88, %esi
 	call	free_object
 	movq	const0u(%rip), %rax
 	movq	%rax, (%rbx)
@@ -11114,15 +11127,15 @@
 	.p2align 4,,5
 	jne	.L2016
 .L2014:
-	movl	$.LC88, %edi
+	movl	$.LC89, %edi
 	movl	$0, %eax
 	call	error
 .L2017:
-	movl	$.LC89, %edi
+	movl	$.LC90, %edi
 	movl	$0, %eax
 	call	error
 .L2016:
-	movl	$.LC90, %edi
+	movl	$.LC91, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L2018
@@ -11216,7 +11229,7 @@
 	movq	%rax, pc(%rip)
 	jmp	.L3363
 .L2024:
-	movl	$.LC91, %edi
+	movl	$.LC92, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -11484,7 +11497,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC92, %edi
+	movl	$.LC93, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -11544,7 +11557,7 @@
 .L2090:
 	movq	24(%rdx), %rdx
 	leaq	32(%rsp), %rdi
-	movl	$.LC93, %esi
+	movl	$.LC94, %esi
 	movl	$0, %eax
 	call	sprintf
 	movq	sp(%rip), %rdx
@@ -11586,7 +11599,7 @@
 	leal	-1(%rbp,%rcx), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2096
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2096:
 	movq	sp(%rip), %rax
@@ -11600,7 +11613,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2101
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2101:
@@ -11677,7 +11690,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC96, %edi
+	movl	$.LC97, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -11705,7 +11718,7 @@
 .L2113:
 	leaq	32(%rsp), %rdi
 	cvtss2sd	24(%rdx), %xmm0
-	movl	$.LC97, %esi
+	movl	$.LC98, %esi
 	movl	$1, %eax
 	call	sprintf
 	movq	sp(%rip), %rdx
@@ -11747,7 +11760,7 @@
 	leal	-1(%rbp,%rcx), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2119
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2119:
 	movq	sp(%rip), %rax
@@ -11761,7 +11774,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2124
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2124:
@@ -11838,7 +11851,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC98, %edi
+	movl	$.LC99, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -11854,7 +11867,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC98, %edi
+	movl	$.LC99, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L2082
@@ -11893,7 +11906,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC98, %edi
+	movl	$.LC99, %edi
 	movl	$0, %eax
 	call	error
 .L2080:
@@ -11908,7 +11921,7 @@
 	jne	.L2138
 	movq	-8(%rdx), %rdx
 	leaq	32(%rsp), %rdi
-	movl	$.LC93, %esi
+	movl	$.LC94, %esi
 	movl	$0, %eax
 	call	sprintf
 	movq	sp(%rip), %rax
@@ -11953,7 +11966,7 @@
 	leal	(%rsi,%rbp), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2147
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2147:
 	movl	%ebx, %edi
@@ -12020,7 +12033,7 @@
 .L2141:
 	leaq	32(%rsp), %rdi
 	cvtss2sd	8(%rcx), %xmm0
-	movl	$.LC97, %esi
+	movl	$.LC98, %esi
 	movl	$1, %eax
 	call	sprintf
 	movq	sp(%rip), %rax
@@ -12065,7 +12078,7 @@
 	leal	(%rsi,%rbp), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2161
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2161:
 	movl	%ebx, %edi
@@ -12192,7 +12205,7 @@
 	leal	(%rax,%rbp), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2179
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	movl	$0, %eax
 	call	error
 .L2179:
@@ -12208,7 +12221,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2184
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2184:
@@ -12370,7 +12383,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC98, %edi
+	movl	$.LC99, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -12382,7 +12395,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC96, %edi
+	movl	$.LC97, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -12485,7 +12498,7 @@
 	leal	(%rax,%r13), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2227
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	movl	$0, %eax
 	call	error
 .L2227:
@@ -12499,7 +12512,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2232
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2232:
@@ -12651,7 +12664,7 @@
 	jne	.L2256
 	movq	8(%r8), %rdx
 	leaq	32(%rsp), %rdi
-	movl	$.LC93, %esi
+	movl	$.LC94, %esi
 	movl	$0, %eax
 	call	sprintf
 	testb	$1, 2(%r12)
@@ -12692,7 +12705,7 @@
 	leal	-1(%r13,%rcx), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2262
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2262:
 	cmpw	$1, 2(%r12)
@@ -12705,7 +12718,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2267
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2267:
@@ -12774,7 +12787,7 @@
 	jne	.L2277
 	leaq	32(%rsp), %rdi
 	cvtss2sd	8(%r8), %xmm0
-	movl	$.LC97, %esi
+	movl	$.LC98, %esi
 	movl	$1, %eax
 	call	sprintf
 	testb	$1, 2(%r12)
@@ -12815,7 +12828,7 @@
 	leal	-1(%r13,%rcx), %ebx
 	cmpl	config_int+56(%rip), %ebx
 	jle	.L2283
-	movl	$.LC94, %edi
+	movl	$.LC95, %edi
 	call	error
 .L2283:
 	cmpw	$1, 2(%r12)
@@ -12828,7 +12841,7 @@
 	movq	%rax, %rbx
 	testq	%rax, %rax
 	jne	.L2288
-	movl	$.LC95, %edi
+	movl	$.LC96, %edi
 	movl	$0, %eax
 	call	fatal
 .L2288:
@@ -12917,7 +12930,7 @@
 	movw	$0, 2(%r12)
 	jmp	.L2255
 .L2300:
-	movl	$.LC99, %edi
+	movl	$.LC100, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L2255
@@ -12937,7 +12950,7 @@
 	movss	%xmm0, 8(%r12)
 	jmp	.L2255
 .L2304:
-	movl	$.LC99, %edi
+	movl	$.LC100, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L2255
@@ -13015,7 +13028,7 @@
 .L2214:
 	cmpw	$2, (%r8)
 	je	.L2312
-	movl	$.LC100, %edi
+	movl	$.LC101, %edi
 	movl	$0, %eax
 	call	error
 .L2312:
@@ -13028,7 +13041,7 @@
 	jne	.L2314
 	testb	%bl, %bl
 	jne	.L2314
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2314:
@@ -13634,7 +13647,7 @@
 	jmp	.L2426
 .L2423:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L2411
 .L2427:
@@ -13872,7 +13885,7 @@
 	subq	%rdx, %rbp
 	cmpw	$8, (%rbp)
 	je	.L2463
-	movl	$.LC101, %edi
+	movl	$.LC102, %edi
 	movl	$0, %eax
 	call	error
 .L2463:
@@ -14236,7 +14249,7 @@
 	cmpw	$2, -16(%rbx)
 	.p2align 4,,5
 	je	.L2524
-	movl	$.LC102, %edi
+	movl	$.LC103, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L2526
@@ -14247,7 +14260,7 @@
 	testb	%bl, %bl
 	.p2align 4,,2
 	jne	.L2527
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2527:
@@ -14414,7 +14427,7 @@
 	jmp	.L2561
 .L2558:
 	movq	8(%rbx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L2546
 .L2562:
@@ -14493,7 +14506,7 @@
 	cmpw	$2, %ax
 	.p2align 4,,7
 	je	.L2574
-	movl	$.LC102, %edi
+	movl	$.LC103, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -14505,7 +14518,7 @@
 	jne	.L2576
 	testb	%bl, %bl
 	jne	.L2576
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2576:
@@ -14603,7 +14616,7 @@
 	jmp	.L2595
 .L2592:
 	movq	8(%rbx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L2580
 .L2596:
@@ -14696,7 +14709,7 @@
 	movzwl	%cx, %esi
 	call	function_name
 	movq	%rax, %rsi
-	movl	$.LC103, %edi
+	movl	$.LC104, %edi
 	movl	$0, %eax
 	call	error
 .L2605:
@@ -15370,7 +15383,7 @@
 	movq	sp(%rip), %rax
 	cmpw	$2, (%rax)
 	je	.L2693
-	movl	$.LC104, %edi
+	movl	$.LC105, %edi
 	movl	$0, %eax
 	call	error
 .L2693:
@@ -15440,7 +15453,7 @@
 	movw	$128, (%rdx)
 	movq	sp(%rip), %rax
 	movss	8(%rcx), %xmm0
-	subss	.LC80(%rip), %xmm0
+	subss	.LC81(%rip), %xmm0
 	movss	%xmm0, 8(%rcx)
 	movss	%xmm0, 8(%rax)
 	jmp	.L3363
@@ -15450,7 +15463,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$1, (%rax)
 	jne	.L2703
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2703:
@@ -15467,7 +15480,7 @@
 	movq	%rax, 8(%rcx)
 	jmp	.L3363
 .L2699:
-	movl	$.LC83, %edi
+	movl	$.LC84, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -15488,7 +15501,7 @@
 	jmp	.L3363
 .L2708:
 	movss	8(%rdx), %xmm0
-	subss	.LC80(%rip), %xmm0
+	subss	.LC81(%rip), %xmm0
 	movss	%xmm0, 8(%rdx)
 	jmp	.L3363
 .L2709:
@@ -15497,7 +15510,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$1, (%rax)
 	jne	.L2710
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2710:
@@ -15505,7 +15518,7 @@
 	subb	$1, (%rax)
 	jmp	.L3363
 .L2706:
-	movl	$.LC83, %edi
+	movl	$.LC84, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -15526,7 +15539,7 @@
 	movq	%rdi, sp(%rip)
 	testq	%rax, %rax
 	jne	.L2717
-	movl	$.LC105, %edi
+	movl	$.LC106, %edi
 	call	error
 .L2717:
 	movq	sp(%rip), %rsi
@@ -15540,10 +15553,10 @@
 .L2715:
 	movss	8(%rdx), %xmm0
 	movq	%rdi, sp(%rip)
-	ucomiss	.LC106(%rip), %xmm0
+	ucomiss	.LC107(%rip), %xmm0
 	jne	.L2719
 	jp	.L2719
-	movl	$.LC105, %edi
+	movl	$.LC106, %edi
 	movl	$0, %eax
 	call	error
 .L2719:
@@ -15558,7 +15571,7 @@
 	jne	.L2722
 	cmpq	$0, 24(%rdi)
 	jne	.L2724
-	movl	$.LC105, %edi
+	movl	$.LC106, %edi
 	movl	$0, %eax
 	call	error
 .L2724:
@@ -15573,7 +15586,7 @@
 	ucomiss	24(%rdi), %xmm0
 	jne	.L2726
 	jp	.L2726
-	movl	$.LC107, %edi
+	movl	$.LC108, %edi
 	movl	$0, %eax
 	call	error
 .L2726:
@@ -15777,7 +15790,7 @@
 .L2765:
 	movw	$128, (%rdx)
 	movq	sp(%rip), %rax
-	movss	.LC80(%rip), %xmm0
+	movss	.LC81(%rip), %xmm0
 	addss	8(%rcx), %xmm0
 	movss	%xmm0, 8(%rcx)
 	movss	%xmm0, 8(%rax)
@@ -15788,7 +15801,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$-1, (%rax)
 	jne	.L2767
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L2767:
@@ -15805,7 +15818,7 @@
 	movq	%rax, 8(%rcx)
 	jmp	.L3363
 .L2763:
-	movl	$.LC82, %edi
+	movl	$.LC83, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -15813,7 +15826,7 @@
 	movq	sp(%rip), %rax
 	cmpw	$512, (%rax)
 	je	.L2770
-	movl	$.LC108, %edi
+	movl	$.LC109, %edi
 	movl	$0, %eax
 	call	error
 .L2770:
@@ -15827,7 +15840,7 @@
 	movzwl	2(%rbp), %eax
 	cmpq	%rdx, %rax
 	jg	.L2772
-	movl	$.LC109, %edi
+	movl	$.LC110, %edi
 	movl	$0, %eax
 	call	error
 .L2772:
@@ -15960,7 +15973,7 @@
 	movq	sp(%rip), %rax
 	cmpw	$512, (%rax)
 	je	.L2804
-	movl	$.LC108, %edi
+	movl	$.LC109, %edi
 	movl	$0, %eax
 	call	error
 .L2804:
@@ -15974,7 +15987,7 @@
 	movzwl	2(%rbx), %eax
 	cmpq	%rdx, %rax
 	jg	.L2806
-	movl	$.LC109, %edi
+	movl	$.LC110, %edi
 	movl	$0, %eax
 	call	error
 .L2806:
@@ -16141,7 +16154,7 @@
 .L2812:
 	cmpw	$2, -16(%rdx)
 	je	.L2844
-	movl	$.LC110, %edi
+	movl	$.LC111, %edi
 	movl	$0, %eax
 	call	error
 .L2844:
@@ -16155,7 +16168,7 @@
 	testq	%rdx, %rdx
 	jns	.L2848
 .L2846:
-	movl	$.LC72, %edi
+	movl	$.LC73, %edi
 	movl	$0, %eax
 	call	error
 .L2848:
@@ -16177,7 +16190,7 @@
 .L2809:
 	cmpw	$2, -16(%rdx)
 	je	.L2849
-	movl	$.LC111, %edi
+	movl	$.LC112, %edi
 	movl	$0, %eax
 	call	error
 .L2849:
@@ -16219,7 +16232,7 @@
 	cmpq	$0, 120(%rsp)
 	jns	.L2858
 .L2856:
-	movl	$.LC112, %edi
+	movl	$.LC113, %edi
 	movl	$0, %eax
 	call	error
 .L2858:
@@ -16277,7 +16290,7 @@
 .L2810:
 	cmpw	$2, -16(%rdx)
 	je	.L2866
-	movl	$.LC113, %edi
+	movl	$.LC114, %edi
 	movl	$0, %eax
 	call	error
 .L2866:
@@ -16286,7 +16299,7 @@
 	movq	%rax, 120(%rsp)
 	testq	%rax, %rax
 	jns	.L2868
-	movl	$.LC114, %edi
+	movl	$.LC115, %edi
 	movl	$0, %eax
 	call	error
 .L2868:
@@ -16295,7 +16308,7 @@
 	movzwl	2(%rbp), %eax
 	cmpq	120(%rsp), %rax
 	jg	.L2870
-	movl	$.LC77, %edi
+	movl	$.LC78, %edi
 	movl	$0, %eax
 	call	error
 .L2870:
@@ -16432,7 +16445,7 @@
 	cmpq	$0, 8(%rdx)
 	.p2align 4,,7
 	jne	.L2902
-	movl	$.LC74, %edi
+	movl	$.LC75, %edi
 	movl	$0, %eax
 	call	error
 .L2902:
@@ -16440,7 +16453,7 @@
 	movswl	(%rax),%edi
 	call	type_name
 	movq	%rax, %rsi
-	movl	$.LC75, %edi
+	movl	$.LC76, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -16459,7 +16472,7 @@
 	cmpw	$2, -16(%rdx)
 	.p2align 4,,7
 	je	.L2909
-	movl	$.LC115, %edi
+	movl	$.LC116, %edi
 	movl	$0, %eax
 	call	error
 .L2909:
@@ -16476,7 +16489,7 @@
 	testq	%rcx, %rcx
 	jns	.L2913
 .L2911:
-	movl	$.LC72, %edi
+	movl	$.LC73, %edi
 	movl	$0, %eax
 	call	error
 .L2913:
@@ -16528,7 +16541,7 @@
 	movq	sp(%rip), %rax
 	cmpw	$2, -16(%rax)
 	je	.L2918
-	movl	$.LC116, %edi
+	movl	$.LC117, %edi
 	movl	$0, %eax
 	call	error
 .L2918:
@@ -16542,7 +16555,7 @@
 	testq	%rcx, %rcx
 	jns	.L2922
 .L2920:
-	movl	$.LC112, %edi
+	movl	$.LC113, %edi
 	movl	$0, %eax
 	call	error
 .L2922:
@@ -16601,7 +16614,7 @@
 	movq	8(%rdx), %rbp
 	cmpw	$2, -16(%rdx)
 	je	.L2930
-	movl	$.LC117, %edi
+	movl	$.LC118, %edi
 	movl	$0, %eax
 	call	error
 .L2930:
@@ -16615,7 +16628,7 @@
 	cmpq	%rax, %rdx
 	jl	.L2934
 .L2932:
-	movl	$.LC77, %edi
+	movl	$.LC78, %edi
 	movl	$0, %eax
 	call	error
 .L2934:
@@ -16752,7 +16765,7 @@
 	cmpq	$0, 8(%rdx)
 	.p2align 4,,7
 	jne	.L2965
-	movl	$.LC74, %edi
+	movl	$.LC75, %edi
 	movl	$0, %eax
 	call	error
 .L2965:
@@ -16760,7 +16773,7 @@
 	movswl	(%rax),%edi
 	call	type_name
 	movq	%rax, %rsi
-	movl	$.LC75, %edi
+	movl	$.LC76, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -16802,7 +16815,7 @@
 	movq	%rax, sp(%rip)
 	testq	%rdx, %rdx
 	jne	.L2972
-	movl	$.LC118, %edi
+	movl	$.LC119, %edi
 	movl	$0, %eax
 	call	error
 .L2972:
@@ -16960,7 +16973,7 @@
 	jmp	.L2999
 .L2996:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L2984
 .L3000:
@@ -17095,7 +17108,7 @@
 	jmp	.L3024
 .L3021:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L3009
 .L3025:
@@ -17174,7 +17187,7 @@
 	movl	$162, %esi
 	call	bad_argument
 .L3036:
-	movl	$.LC119, %edi
+	movl	$.LC120, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -17202,7 +17215,7 @@
 	xorb	$-128, 11(%rax)
 	jmp	.L3363
 .L3040:
-	movl	$.LC121, %edi
+	movl	$.LC122, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -17303,7 +17316,7 @@
 	jmp	.L3061
 .L3058:
 	movq	8(%rcx), %rdi
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	call	dealloc_object
 	jmp	.L3046
 .L3062:
@@ -17399,7 +17412,7 @@
 	movss	8(%rcx), %xmm0
 	movq	sp(%rip), %rax
 	movss	%xmm0, 8(%rax)
-	subss	.LC80(%rip), %xmm0
+	subss	.LC81(%rip), %xmm0
 	movss	%xmm0, 8(%rcx)
 	jmp	.L3363
 .L3072:
@@ -17409,7 +17422,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$1, (%rax)
 	jne	.L3073
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L3073:
@@ -17424,7 +17437,7 @@
 	movw	$0, 2(%rax)
 	jmp	.L3363
 .L3069:
-	movl	$.LC83, %edi
+	movl	$.LC84, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -17452,7 +17465,7 @@
 	movss	8(%rcx), %xmm0
 	movq	sp(%rip), %rax
 	movss	%xmm0, 8(%rax)
-	addss	.LC80(%rip), %xmm0
+	addss	.LC81(%rip), %xmm0
 	movss	%xmm0, 8(%rcx)
 	jmp	.L3363
 .L3079:
@@ -17461,7 +17474,7 @@
 	movq	global_lvalue_byte+8(%rip), %rax
 	cmpb	$-1, (%rax)
 	jne	.L3080
-	movl	$.LC81, %edi
+	movl	$.LC82, %edi
 	movl	$0, %eax
 	call	error
 .L3080:
@@ -17478,7 +17491,7 @@
 	movw	$0, 2(%rax)
 	jmp	.L3363
 .L3076:
-	movl	$.LC82, %edi
+	movl	$.LC83, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -17582,12 +17595,12 @@
 	movl	%eax, 16(%rsp)
 	jmp	.L3091
 .L3355:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3091
 .L3085:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 .L3091:
@@ -17596,7 +17609,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3096
-	movl	$.LC123, %edi
+	movl	$.LC124, %edi
 	movl	$0, %eax
 	call	error
 .L3096:
@@ -17607,7 +17620,7 @@
 	cmpl	%ebp, 16(%rsp)
 	jge	.L3100
 .L3098:
-	movl	$.LC124, %edi
+	movl	$.LC125, %edi
 	movl	$0, %eax
 	call	error
 .L3100:
@@ -17616,7 +17629,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3101
-	movl	$.LC125, %edi
+	movl	$.LC126, %edi
 	movl	$0, %eax
 	call	error
 .L3101:
@@ -17627,7 +17640,7 @@
 	cmpl	%ebx, 16(%rsp)
 	jge	.L3103
 .L3105:
-	movl	$.LC126, %edi
+	movl	$.LC127, %edi
 	movl	$0, %eax
 	call	error
 .L3103:
@@ -17705,12 +17718,12 @@
 	movl	%eax, 20(%rsp)
 	jmp	.L3112
 .L3356:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3112
 .L3106:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 .L3112:
@@ -17719,7 +17732,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3117
-	movl	$.LC123, %edi
+	movl	$.LC124, %edi
 	movl	$0, %eax
 	call	error
 .L3117:
@@ -17730,7 +17743,7 @@
 	cmpl	%ebp, 20(%rsp)
 	jge	.L3121
 .L3119:
-	movl	$.LC124, %edi
+	movl	$.LC125, %edi
 	movl	$0, %eax
 	call	error
 .L3121:
@@ -17739,7 +17752,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3122
-	movl	$.LC125, %edi
+	movl	$.LC126, %edi
 	movl	$0, %eax
 	call	error
 .L3122:
@@ -17750,7 +17763,7 @@
 	cmpl	%ebx, 20(%rsp)
 	jge	.L3124
 .L3126:
-	movl	$.LC126, %edi
+	movl	$.LC127, %edi
 	movl	$0, %eax
 	call	error
 .L3124:
@@ -17828,12 +17841,12 @@
 	movl	%eax, 24(%rsp)
 	jmp	.L3133
 .L3357:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3133
 .L3127:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 .L3133:
@@ -17842,7 +17855,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3138
-	movl	$.LC123, %edi
+	movl	$.LC124, %edi
 	movl	$0, %eax
 	call	error
 .L3138:
@@ -17856,7 +17869,7 @@
 	cmpl	%ebp, %ebx
 	jge	.L3142
 .L3140:
-	movl	$.LC124, %edi
+	movl	$.LC125, %edi
 	movl	$0, %eax
 	call	error
 .L3142:
@@ -17865,7 +17878,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3143
-	movl	$.LC125, %edi
+	movl	$.LC126, %edi
 	movl	$0, %eax
 	call	error
 .L3143:
@@ -17875,7 +17888,7 @@
 	cmpl	%ebx, 24(%rsp)
 	jge	.L3145
 .L3147:
-	movl	$.LC126, %edi
+	movl	$.LC127, %edi
 	movl	$0, %eax
 	call	error
 .L3145:
@@ -17953,12 +17966,12 @@
 	movl	%eax, 28(%rsp)
 	jmp	.L3154
 .L3358:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3154
 .L3148:
-	movl	$.LC122, %edi
+	movl	$.LC123, %edi
 	movl	$0, %eax
 	call	error
 .L3154:
@@ -17967,7 +17980,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3159
-	movl	$.LC123, %edi
+	movl	$.LC124, %edi
 	movl	$0, %eax
 	call	error
 .L3159:
@@ -17980,7 +17993,7 @@
 	cmpl	%ebp, 28(%rsp)
 	jge	.L3163
 .L3161:
-	movl	$.LC124, %edi
+	movl	$.LC125, %edi
 	movl	$0, %eax
 	call	error
 .L3163:
@@ -17989,7 +18002,7 @@
 	movq	%rax, sp(%rip)
 	cmpw	$2, -16(%rdx)
 	je	.L3164
-	movl	$.LC125, %edi
+	movl	$.LC126, %edi
 	movl	$0, %eax
 	call	error
 .L3164:
@@ -18000,7 +18013,7 @@
 	cmpl	%ebx, 28(%rsp)
 	jge	.L3166
 .L3168:
-	movl	$.LC126, %edi
+	movl	$.LC127, %edi
 	movl	$0, %eax
 	call	error
 .L3166:
@@ -18129,7 +18142,7 @@
 	.p2align 4,,7
 	jmp	.L3188
 .L3185:
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	movq	catch_value+8(%rip), %rdi
 	call	dealloc_object
 	jmp	.L3173
@@ -18316,7 +18329,7 @@
 	.p2align 4,,7
 	jmp	.L3222
 .L3219:
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	movq	catch_value+8(%rip), %rdi
 	call	dealloc_object
 	jmp	.L3207
@@ -18566,19 +18579,19 @@
 	movq	%rax, sp(%rip)
 	testb	$-118, %dl
 	jne	.L3250
-	movl	$.LC127, %edi
+	movl	$.LC128, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
 .L3250:
 	testb	$-118, (%rax)
 	jne	.L3252
-	movl	$.LC128, %edi
+	movl	$.LC129, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
 .L3252:
-	movl	$.LC129, %edi
+	movl	$.LC130, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -18723,7 +18736,7 @@
 	.p2align 4,,7
 	jmp	.L3271
 .L3268:
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	movq	catch_value+8(%rip), %rdi
 	call	dealloc_object
 	jmp	.L3256
@@ -18895,7 +18908,7 @@
 	call	type_name
 	movq	%rax, %rsi
 	movq	%rbx, %rdx
-	movl	$.LC130, %edi
+	movl	$.LC131, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3363
@@ -19087,19 +19100,19 @@
 call_direct:
 .LFB119:
 	pushq	%r15
-.LCFI192:
+.LCFI194:
 	pushq	%r14
-.LCFI193:
+.LCFI195:
 	pushq	%r13
-.LCFI194:
+.LCFI196:
 	pushq	%r12
-.LCFI195:
+.LCFI197:
 	pushq	%rbp
-.LCFI196:
+.LCFI198:
 	pushq	%rbx
-.LCFI197:
+.LCFI199:
 	subq	$8, %rsp
-.LCFI198:
+.LCFI200:
 	movq	%rdi, %r14
 	movl	%esi, %ebx
 	movl	%edx, %r12d
@@ -19435,19 +19448,19 @@
 call___INIT:
 .LFB113:
 	pushq	%r15
-.LCFI199:
+.LCFI201:
 	pushq	%r14
-.LCFI200:
+.LCFI202:
 	pushq	%r13
-.LCFI201:
+.LCFI203:
 	pushq	%r12
-.LCFI202:
+.LCFI204:
 	pushq	%rbp
-.LCFI203:
+.LCFI205:
 	pushq	%rbx
-.LCFI204:
+.LCFI206:
 	subq	$8, %rsp
-.LCFI205:
+.LCFI207:
 	movq	%rdi, %r12
 	movl	$0, tracedepth(%rip)
 	andw	$-129, 2(%rdi)
@@ -19791,13 +19804,13 @@
 .LFE113:
 	.size	call___INIT, .-call___INIT
 	.section	.rodata.str1.1
-.LC131:
-	.string	"apply_low() cache [oprogp]"
 .LC132:
+	.string	"apply_low() cache [oprogp]"
+.LC133:
 	.string	"apply_low() cache [progp]"
 	.section	.rodata.str1.8
 	.align 8
-.LC133:
+.LC134:
 	.string	"apply_low() cache [oprogp miss]"
 	.text
 .globl apply_low
@@ -19805,19 +19818,19 @@
 apply_low:
 .LFB111:
 	pushq	%r15
-.LCFI206:
+.LCFI208:
 	pushq	%r14
-.LCFI207:
+.LCFI209:
 	pushq	%r13
-.LCFI208:
+.LCFI210:
 	pushq	%r12
-.LCFI209:
+.LCFI211:
 	pushq	%rbp
-.LCFI210:
+.LCFI212:
 	pushq	%rbx
-.LCFI211:
+.LCFI213:
 	subq	$56, %rsp
-.LCFI212:
+.LCFI214:
 	movq	%rdi, %r14
 	movq	%rsi, (%rsp)
 	movl	%edx, %ebp
@@ -20499,11 +20512,11 @@
 .L3571:
 	movq	current_prog(%rip), %rax
 	movq	%rax, 8(%r15)
-	movl	$.LC131, %esi
+	movl	$.LC132, %esi
 	movq	(%r15), %rdi
 	call	reference_prog
 	movq	8(%r15), %rdi
-	movl	$.LC132, %esi
+	movl	$.LC133, %esi
 	call	reference_prog
 	movq	current_object(%rip), %rax
 	movq	%rax, previous_ob(%rip)
@@ -20517,7 +20530,7 @@
 	jmp	.L3533
 .L3543:
 	movq	%r13, (%r15)
-	movl	$.LC133, %esi
+	movl	$.LC134, %esi
 	movq	%r13, %rdi
 	call	reference_prog
 	testq	%rbx, %rbx
@@ -20563,19 +20576,19 @@
 call_all_other:
 .LFB115:
 	pushq	%r15
-.LCFI213:
+.LCFI215:
 	pushq	%r14
-.LCFI214:
+.LCFI216:
 	pushq	%r13
-.LCFI215:
+.LCFI217:
 	pushq	%r12
-.LCFI216:
+.LCFI218:
 	pushq	%rbp
-.LCFI217:
+.LCFI219:
 	pushq	%rbx
-.LCFI218:
+.LCFI220:
 	subq	$40, %rsp
-.LCFI219:
+.LCFI221:
 	movq	%rdi, %r12
 	movq	%rsi, 24(%rsp)
 	movl	%edx, 20(%rsp)
@@ -20770,7 +20783,7 @@
 apply:
 .LFB112:
 	subq	$8, %rsp
-.LCFI220:
+.LCFI222:
 	movl	$0, tracedepth(%rip)
 	movl	%ecx, call_origin(%rip)
 	call	apply_low
@@ -20860,7 +20873,7 @@
 	.p2align 4,,7
 	jmp	.L3669
 .L3666:
-	movl	$.LC52, %esi
+	movl	$.LC53, %esi
 	movq	apply_ret_value+8(%rip), %rdi
 	call	dealloc_object
 	jmp	.L3654
@@ -20923,9 +20936,9 @@
 safe_apply:
 .LFB114:
 	pushq	%rbx
-.LCFI221:
+.LCFI223:
 	subq	$272, %rsp
-.LCFI222:
+.LCFI224:
 	movq	%rdi, 24(%rsp)
 	movq	%rsi, 16(%rsp)
 	movl	%edx, 12(%rsp)
@@ -20977,7 +20990,7 @@
 	.size	safe_apply, .-safe_apply
 	.section	.rodata.str1.8
 	.align 8
-.LC134:
+.LC135:
 	.string	"Object destructed during efun callback.\n"
 	.text
 .globl call_efun_callback
@@ -20985,15 +20998,15 @@
 call_efun_callback:
 .LFB63:
 	pushq	%r13
-.LCFI223:
+.LCFI225:
 	pushq	%r12
-.LCFI224:
+.LCFI226:
 	pushq	%rbp
-.LCFI225:
+.LCFI227:
 	pushq	%rbx
-.LCFI226:
+.LCFI228:
 	subq	$8, %rsp
-.LCFI227:
+.LCFI229:
 	movq	%rdi, %r12
 	movl	%esi, %r13d
 	movl	16(%rdi), %ebp
@@ -21080,7 +21093,7 @@
 	je	.L3712
 	testb	$16, 2(%rax)
 	je	.L3714
-	movl	$.LC134, %edi
+	movl	$.LC135, %edi
 	movl	$0, %eax
 	call	error
 .L3714:
@@ -21107,26 +21120,26 @@
 	.size	call_efun_callback, .-call_efun_callback
 	.section	.rodata.str1.8
 	.align 8
-.LC135:
+.LC136:
 	.string	"Can't catch too deep recursion error.\n"
 	.align 8
-.LC136:
+.LC137:
 	.string	"Can't catch eval cost too big error.\n"
 	.text
 	.type	do_catch, @function
 do_catch:
 .LFB104:
 	pushq	%rbx
-.LCFI228:
+.LCFI230:
 	subq	$256, %rsp
-.LCFI229:
+.LCFI231:
 	movq	%rdi, 8(%rsp)
 	movl	%esi, %ebx
 	leaq	16(%rsp), %rdi
 	call	save_context
 	testl	%eax, %eax
 	jne	.L3719
-	movl	$.LC135, %edi
+	movl	$.LC136, %edi
 	call	error
 .L3719:
 	cmpq	$control_stack+11920, csp(%rip)
@@ -21202,7 +21215,7 @@
 	je	.L3727
 	leaq	16(%rsp), %rdi
 	call	pop_context
-	movl	$.LC136, %edi
+	movl	$.LC137, %edi
 	movl	$0, %eax
 	call	error
 .L3727:
@@ -21210,7 +21223,7 @@
 	je	.L3729
 	leaq	16(%rsp), %rdi
 	call	pop_context
-	movl	$.LC135, %edi
+	movl	$.LC136, %edi
 	movl	$0, %eax
 	call	error
 	jmp	.L3729
@@ -21581,14 +21594,14 @@
 	.zero	14
 .globl fake_prog
 	.section	.rodata.str1.1
-.LC137:
+.LC138:
 	.string	"<driver>"
 	.data
 	.align 32
 	.type	fake_prog, @object
 	.size	fake_prog, 152
 fake_prog:
-	.quad	.LC137
+	.quad	.LC138
 	.zero	144
 .globl fake_program
 	.type	fake_program, @object
@@ -21653,34 +21666,34 @@
 	.value	2048
 	.zero	14
 	.section	.rodata.str1.1
-.LC138:
-	.string	"int"
 .LC139:
-	.string	"string"
+	.string	"int"
 .LC140:
-	.string	"array"
+	.string	"string"
 .LC141:
-	.string	"mapping"
+	.string	"array"
 .LC142:
-	.string	"float"
+	.string	"mapping"
 .LC143:
-	.string	"buffer"
+	.string	"float"
 .LC144:
+	.string	"buffer"
+.LC145:
 	.string	"class"
 	.section	.rodata
 	.align 32
 	.type	type_names, @object
 	.size	type_names, 72
 type_names:
-	.quad	.LC138
 	.quad	.LC139
 	.quad	.LC140
-	.quad	.LC46
 	.quad	.LC141
-	.quad	.LC42
+	.quad	.LC47
 	.quad	.LC142
+	.quad	.LC43
 	.quad	.LC143
 	.quad	.LC144
+	.quad	.LC145
 	.local	tracedepth
 	.comm	tracedepth,4,4
 	.local	start_of_stack
@@ -21931,23 +21944,17 @@
 	.long	.LEFDE23-.LASFDE23
 .LASFDE23:
 	.long	.LASFDE23-.Lframe1
-	.long	.LFB123
-	.long	.LFE123-.LFB123
+	.long	.LFB134
+	.long	.LFE134-.LFB134
 	.uleb128 0x0
-	.byte	0x4
-	.long	.LCFI17-.LFB123
-	.byte	0xe
-	.uleb128 0x10
-	.byte	0x83
-	.uleb128 0x2
 	.align 8
 .LEFDE23:
 .LSFDE25:
 	.long	.LEFDE25-.LASFDE25
 .LASFDE25:
 	.long	.LASFDE25-.Lframe1
-	.long	.LFB134
-	.long	.LFE134-.LFB134
+	.long	.LFB136
+	.long	.LFE136-.LFB136
 	.uleb128 0x0
 	.align 8
 .LEFDE25:
@@ -21955,8 +21962,8 @@
 	.long	.LEFDE27-.LASFDE27
 .LASFDE27:
 	.long	.LASFDE27-.Lframe1
-	.long	.LFB136
-	.long	.LFE136-.LFB136
+	.long	.LFB137
+	.long	.LFE137-.LFB137
 	.uleb128 0x0
 	.align 8
 .LEFDE27:
@@ -21964,28 +21971,19 @@
 	.long	.LEFDE29-.LASFDE29
 .LASFDE29:
 	.long	.LASFDE29-.Lframe1
-	.long	.LFB137
-	.long	.LFE137-.LFB137
-	.uleb128 0x0
-	.align 8
-.LEFDE29:
-.LSFDE31:
-	.long	.LEFDE31-.LASFDE31
-.LASFDE31:
-	.long	.LASFDE31-.Lframe1
 	.long	.LFB133
 	.long	.LFE133-.LFB133
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI18-.LFB133
+	.long	.LCFI17-.LFB133
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI19-.LCFI18
+	.long	.LCFI18-.LCFI17
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI20-.LCFI19
+	.long	.LCFI19-.LCFI18
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -21993,36 +21991,36 @@
 	.byte	0x86
 	.uleb128 0x2
 	.align 8
-.LEFDE31:
-.LSFDE33:
-	.long	.LEFDE33-.LASFDE33
-.LASFDE33:
-	.long	.LASFDE33-.Lframe1
+.LEFDE29:
+.LSFDE31:
+	.long	.LEFDE31-.LASFDE31
+.LASFDE31:
+	.long	.LASFDE31-.Lframe1
 	.long	.LFB132
 	.long	.LFE132-.LFB132
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI21-.LFB132
+	.long	.LCFI20-.LFB132
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI22-.LCFI21
+	.long	.LCFI21-.LCFI20
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI23-.LCFI22
+	.long	.LCFI22-.LCFI21
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI24-.LCFI23
+	.long	.LCFI23-.LCFI22
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI25-.LCFI24
+	.long	.LCFI24-.LCFI23
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI26-.LCFI25
+	.long	.LCFI25-.LCFI24
 	.byte	0xe
 	.uleb128 0x40
 	.byte	0x83
@@ -22036,29 +22034,44 @@
 	.byte	0x8e
 	.uleb128 0x2
 	.align 8
+.LEFDE31:
+.LSFDE33:
+	.long	.LEFDE33-.LASFDE33
+.LASFDE33:
+	.long	.LASFDE33-.Lframe1
+	.long	.LFB50
+	.long	.LFE50-.LFB50
+	.uleb128 0x0
+	.byte	0x4
+	.long	.LCFI26-.LFB50
+	.byte	0xe
+	.uleb128 0x10
+	.align 8
 .LEFDE33:
 .LSFDE35:
 	.long	.LEFDE35-.LASFDE35
 .LASFDE35:
 	.long	.LASFDE35-.Lframe1
-	.long	.LFB50
-	.long	.LFE50-.LFB50
+	.long	.LFB98
+	.long	.LFE98-.LFB98
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI27-.LFB50
+	.long	.LCFI27-.LFB98
 	.byte	0xe
 	.uleb128 0x10
+	.byte	0x83
+	.uleb128 0x2
 	.align 8
 .LEFDE35:
 .LSFDE37:
 	.long	.LEFDE37-.LASFDE37
 .LASFDE37:
 	.long	.LASFDE37-.Lframe1
-	.long	.LFB98
-	.long	.LFE98-.LFB98
+	.long	.LFB93
+	.long	.LFE93-.LFB93
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI28-.LFB98
+	.long	.LCFI28-.LFB93
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22069,11 +22082,11 @@
 	.long	.LEFDE39-.LASFDE39
 .LASFDE39:
 	.long	.LASFDE39-.Lframe1
-	.long	.LFB93
-	.long	.LFE93-.LFB93
+	.long	.LFB91
+	.long	.LFE91-.LFB91
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI29-.LFB93
+	.long	.LCFI29-.LFB91
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22084,11 +22097,11 @@
 	.long	.LEFDE41-.LASFDE41
 .LASFDE41:
 	.long	.LASFDE41-.Lframe1
-	.long	.LFB91
-	.long	.LFE91-.LFB91
+	.long	.LFB90
+	.long	.LFE90-.LFB90
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI30-.LFB91
+	.long	.LCFI30-.LFB90
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22099,11 +22112,11 @@
 	.long	.LEFDE43-.LASFDE43
 .LASFDE43:
 	.long	.LASFDE43-.Lframe1
-	.long	.LFB90
-	.long	.LFE90-.LFB90
+	.long	.LFB89
+	.long	.LFE89-.LFB89
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI31-.LFB90
+	.long	.LCFI31-.LFB89
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22114,11 +22127,11 @@
 	.long	.LEFDE45-.LASFDE45
 .LASFDE45:
 	.long	.LASFDE45-.Lframe1
-	.long	.LFB89
-	.long	.LFE89-.LFB89
+	.long	.LFB88
+	.long	.LFE88-.LFB88
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI32-.LFB89
+	.long	.LCFI32-.LFB88
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22129,11 +22142,11 @@
 	.long	.LEFDE47-.LASFDE47
 .LASFDE47:
 	.long	.LASFDE47-.Lframe1
-	.long	.LFB88
-	.long	.LFE88-.LFB88
+	.long	.LFB87
+	.long	.LFE87-.LFB87
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI33-.LFB88
+	.long	.LCFI33-.LFB87
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22144,11 +22157,11 @@
 	.long	.LEFDE49-.LASFDE49
 .LASFDE49:
 	.long	.LASFDE49-.Lframe1
-	.long	.LFB87
-	.long	.LFE87-.LFB87
+	.long	.LFB86
+	.long	.LFE86-.LFB86
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI34-.LFB87
+	.long	.LCFI34-.LFB86
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22159,11 +22172,11 @@
 	.long	.LEFDE51-.LASFDE51
 .LASFDE51:
 	.long	.LASFDE51-.Lframe1
-	.long	.LFB86
-	.long	.LFE86-.LFB86
+	.long	.LFB85
+	.long	.LFE85-.LFB85
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI35-.LFB86
+	.long	.LCFI35-.LFB85
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22174,11 +22187,11 @@
 	.long	.LEFDE53-.LASFDE53
 .LASFDE53:
 	.long	.LASFDE53-.Lframe1
-	.long	.LFB85
-	.long	.LFE85-.LFB85
+	.long	.LFB84
+	.long	.LFE84-.LFB84
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI36-.LFB85
+	.long	.LCFI36-.LFB84
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22189,11 +22202,11 @@
 	.long	.LEFDE55-.LASFDE55
 .LASFDE55:
 	.long	.LASFDE55-.Lframe1
-	.long	.LFB84
-	.long	.LFE84-.LFB84
+	.long	.LFB83
+	.long	.LFE83-.LFB83
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI37-.LFB84
+	.long	.LCFI37-.LFB83
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22204,11 +22217,11 @@
 	.long	.LEFDE57-.LASFDE57
 .LASFDE57:
 	.long	.LASFDE57-.Lframe1
-	.long	.LFB83
-	.long	.LFE83-.LFB83
+	.long	.LFB81
+	.long	.LFE81-.LFB81
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI38-.LFB83
+	.long	.LCFI38-.LFB81
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22219,11 +22232,11 @@
 	.long	.LEFDE59-.LASFDE59
 .LASFDE59:
 	.long	.LASFDE59-.Lframe1
-	.long	.LFB81
-	.long	.LFE81-.LFB81
+	.long	.LFB79
+	.long	.LFE79-.LFB79
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI39-.LFB81
+	.long	.LCFI39-.LFB79
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22234,45 +22247,45 @@
 	.long	.LEFDE61-.LASFDE61
 .LASFDE61:
 	.long	.LASFDE61-.Lframe1
-	.long	.LFB79
-	.long	.LFE79-.LFB79
+	.long	.LFB55
+	.long	.LFE55-.LFB55
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI40-.LFB79
+	.long	.LCFI40-.LFB55
 	.byte	0xe
 	.uleb128 0x10
-	.byte	0x83
-	.uleb128 0x2
 	.align 8
 .LEFDE61:
 .LSFDE63:
 	.long	.LEFDE63-.LASFDE63
 .LASFDE63:
 	.long	.LASFDE63-.Lframe1
-	.long	.LFB55
-	.long	.LFE55-.LFB55
+	.long	.LFB54
+	.long	.LFE54-.LFB54
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI41-.LFB55
+	.long	.LCFI41-.LFB54
 	.byte	0xe
 	.uleb128 0x10
+	.byte	0x4
+	.long	.LCFI42-.LCFI41
+	.byte	0xe
+	.uleb128 0x20
+	.byte	0x83
+	.uleb128 0x2
 	.align 8
 .LEFDE63:
 .LSFDE65:
 	.long	.LEFDE65-.LASFDE65
 .LASFDE65:
 	.long	.LASFDE65-.Lframe1
-	.long	.LFB54
-	.long	.LFE54-.LFB54
+	.long	.LFB53
+	.long	.LFE53-.LFB53
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI42-.LFB54
+	.long	.LCFI43-.LFB53
 	.byte	0xe
 	.uleb128 0x10
-	.byte	0x4
-	.long	.LCFI43-.LCFI42
-	.byte	0xe
-	.uleb128 0x20
 	.byte	0x83
 	.uleb128 0x2
 	.align 8
@@ -22281,11 +22294,11 @@
 	.long	.LEFDE67-.LASFDE67
 .LASFDE67:
 	.long	.LASFDE67-.Lframe1
-	.long	.LFB53
-	.long	.LFE53-.LFB53
+	.long	.LFB51
+	.long	.LFE51-.LFB51
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI44-.LFB53
+	.long	.LCFI44-.LFB51
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22296,56 +22309,41 @@
 	.long	.LEFDE69-.LASFDE69
 .LASFDE69:
 	.long	.LASFDE69-.Lframe1
-	.long	.LFB51
-	.long	.LFE51-.LFB51
+	.long	.LFB57
+	.long	.LFE57-.LFB57
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI45-.LFB51
+	.long	.LCFI47-.LFB57
 	.byte	0xe
-	.uleb128 0x10
-	.byte	0x83
+	.uleb128 0x20
+	.byte	0x86
 	.uleb128 0x2
+	.byte	0x83
+	.uleb128 0x3
 	.align 8
 .LEFDE69:
 .LSFDE71:
 	.long	.LEFDE71-.LASFDE71
 .LASFDE71:
 	.long	.LASFDE71-.Lframe1
-	.long	.LFB57
-	.long	.LFE57-.LFB57
+	.long	.LFB49
+	.long	.LFE49-.LFB49
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI48-.LFB57
+	.long	.LCFI48-.LFB49
 	.byte	0xe
-	.uleb128 0x20
-	.byte	0x86
-	.uleb128 0x2
-	.byte	0x83
-	.uleb128 0x3
+	.uleb128 0x10
 	.align 8
 .LEFDE71:
 .LSFDE73:
 	.long	.LEFDE73-.LASFDE73
 .LASFDE73:
 	.long	.LASFDE73-.Lframe1
-	.long	.LFB49
-	.long	.LFE49-.LFB49
-	.uleb128 0x0
-	.byte	0x4
-	.long	.LCFI49-.LFB49
-	.byte	0xe
-	.uleb128 0x10
-	.align 8
-.LEFDE73:
-.LSFDE75:
-	.long	.LEFDE75-.LASFDE75
-.LASFDE75:
-	.long	.LASFDE75-.Lframe1
 	.long	.LFB70
 	.long	.LFE70-.LFB70
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI53-.LFB70
+	.long	.LCFI52-.LFB70
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x8c
@@ -22355,24 +22353,24 @@
 	.byte	0x83
 	.uleb128 0x4
 	.align 8
-.LEFDE75:
-.LSFDE77:
-	.long	.LEFDE77-.LASFDE77
-.LASFDE77:
-	.long	.LASFDE77-.Lframe1
+.LEFDE73:
+.LSFDE75:
+	.long	.LEFDE75-.LASFDE75
+.LASFDE75:
+	.long	.LASFDE75-.Lframe1
 	.long	.LFB135
 	.long	.LFE135-.LFB135
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI54-.LFB135
+	.long	.LCFI53-.LFB135
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI55-.LCFI54
+	.long	.LCFI54-.LCFI53
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI56-.LCFI55
+	.long	.LCFI55-.LCFI54
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22380,32 +22378,32 @@
 	.byte	0x86
 	.uleb128 0x2
 	.align 8
-.LEFDE77:
-.LSFDE79:
-	.long	.LEFDE79-.LASFDE79
-.LASFDE79:
-	.long	.LASFDE79-.Lframe1
+.LEFDE75:
+.LSFDE77:
+	.long	.LEFDE77-.LASFDE77
+.LASFDE77:
+	.long	.LASFDE77-.Lframe1
 	.long	.LFB125
 	.long	.LFE125-.LFB125
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI57-.LFB125
+	.long	.LCFI56-.LFB125
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI58-.LCFI57
+	.long	.LCFI57-.LCFI56
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI59-.LCFI58
+	.long	.LCFI58-.LCFI57
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI60-.LCFI59
+	.long	.LCFI59-.LCFI58
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI61-.LCFI60
+	.long	.LCFI60-.LCFI59
 	.byte	0xe
 	.uleb128 0x130
 	.byte	0x83
@@ -22417,37 +22415,54 @@
 	.byte	0x8d
 	.uleb128 0x2
 	.align 8
-.LEFDE79:
-.LSFDE81:
-	.long	.LEFDE81-.LASFDE81
-.LASFDE81:
-	.long	.LASFDE81-.Lframe1
+.LEFDE77:
+.LSFDE79:
+	.long	.LEFDE79-.LASFDE79
+.LASFDE79:
+	.long	.LASFDE79-.Lframe1
 	.long	.LFB124
 	.long	.LFE124-.LFB124
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI62-.LFB124
+	.long	.LCFI61-.LFB124
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI63-.LCFI62
+	.long	.LCFI62-.LCFI61
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
 	.uleb128 0x2
 	.align 8
+.LEFDE79:
+.LSFDE81:
+	.long	.LEFDE81-.LASFDE81
+.LASFDE81:
+	.long	.LASFDE81-.Lframe1
+	.long	.LFB128
+	.long	.LFE128-.LFB128
+	.uleb128 0x0
+	.byte	0x4
+	.long	.LCFI63-.LFB128
+	.byte	0xe
+	.uleb128 0x10
+	.align 8
 .LEFDE81:
 .LSFDE83:
 	.long	.LEFDE83-.LASFDE83
 .LASFDE83:
 	.long	.LASFDE83-.Lframe1
-	.long	.LFB128
-	.long	.LFE128-.LFB128
+	.long	.LFB123
+	.long	.LFE123-.LFB123
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI64-.LFB128
+	.long	.LCFI66-.LFB123
 	.byte	0xe
-	.uleb128 0x10
+	.uleb128 0x20
+	.byte	0x86
+	.uleb128 0x2
+	.byte	0x83
+	.uleb128 0x3
 	.align 8
 .LEFDE83:
 .LSFDE85:
@@ -22458,7 +22473,7 @@
 	.long	.LFE92-.LFB92
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI65-.LFB92
+	.long	.LCFI67-.LFB92
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22473,7 +22488,7 @@
 	.long	.LFE58-.LFB58
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI68-.LFB58
+	.long	.LCFI70-.LFB58
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x86
@@ -22490,7 +22505,7 @@
 	.long	.LFE107-.LFB107
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI72-.LFB107
+	.long	.LCFI74-.LFB107
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x8c
@@ -22509,31 +22524,31 @@
 	.long	.LFE109-.LFB109
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI73-.LFB109
+	.long	.LCFI75-.LFB109
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI74-.LCFI73
+	.long	.LCFI76-.LCFI75
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI75-.LCFI74
+	.long	.LCFI77-.LCFI76
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI76-.LCFI75
+	.long	.LCFI78-.LCFI77
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI77-.LCFI76
+	.long	.LCFI79-.LCFI78
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI78-.LCFI77
+	.long	.LCFI80-.LCFI79
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI79-.LCFI78
+	.long	.LCFI81-.LCFI80
 	.byte	0xe
 	.uleb128 0x470
 	.byte	0x83
@@ -22558,15 +22573,15 @@
 	.long	.LFE65-.LFB65
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI80-.LFB65
+	.long	.LCFI82-.LFB65
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI81-.LCFI80
+	.long	.LCFI83-.LCFI82
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI82-.LCFI81
+	.long	.LCFI84-.LCFI83
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22583,31 +22598,31 @@
 	.long	.LFE80-.LFB80
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI83-.LFB80
+	.long	.LCFI85-.LFB80
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI84-.LCFI83
+	.long	.LCFI86-.LCFI85
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI85-.LCFI84
+	.long	.LCFI87-.LCFI86
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI86-.LCFI85
+	.long	.LCFI88-.LCFI87
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI87-.LCFI86
+	.long	.LCFI89-.LCFI88
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI88-.LCFI87
+	.long	.LCFI90-.LCFI89
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI89-.LCFI88
+	.long	.LCFI91-.LCFI90
 	.byte	0xe
 	.uleb128 0x50
 	.byte	0x83
@@ -22632,7 +22647,7 @@
 	.long	.LFE62-.LFB62
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI96-.LFB62
+	.long	.LCFI98-.LFB62
 	.byte	0xe
 	.uleb128 0x40
 	.byte	0x8f
@@ -22657,7 +22672,7 @@
 	.long	.LFE59-.LFB59
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI97-.LFB59
+	.long	.LCFI99-.LFB59
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -22670,7 +22685,7 @@
 	.long	.LFE60-.LFB60
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI101-.LFB60
+	.long	.LCFI103-.LFB60
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x8c
@@ -22689,31 +22704,31 @@
 	.long	.LFE129-.LFB129
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI102-.LFB129
+	.long	.LCFI104-.LFB129
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI103-.LCFI102
+	.long	.LCFI105-.LCFI104
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI104-.LCFI103
+	.long	.LCFI106-.LCFI105
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI105-.LCFI104
+	.long	.LCFI107-.LCFI106
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI106-.LCFI105
+	.long	.LCFI108-.LCFI107
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI107-.LCFI106
+	.long	.LCFI109-.LCFI108
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI108-.LCFI107
+	.long	.LCFI110-.LCFI109
 	.byte	0xe
 	.uleb128 0x80
 	.byte	0x83
@@ -22738,7 +22753,7 @@
 	.long	.LFE118-.LFB118
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI111-.LFB118
+	.long	.LCFI113-.LFB118
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x86
@@ -22755,31 +22770,31 @@
 	.long	.LFE127-.LFB127
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI112-.LFB127
+	.long	.LCFI114-.LFB127
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI113-.LCFI112
+	.long	.LCFI115-.LCFI114
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI114-.LCFI113
+	.long	.LCFI116-.LCFI115
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI115-.LCFI114
+	.long	.LCFI117-.LCFI116
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI116-.LCFI115
+	.long	.LCFI118-.LCFI117
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI117-.LCFI116
+	.long	.LCFI119-.LCFI118
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI118-.LCFI117
+	.long	.LCFI120-.LCFI119
 	.byte	0xe
 	.uleb128 0x90
 	.byte	0x83
@@ -22813,15 +22828,15 @@
 	.long	.LFE68-.LFB68
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI119-.LFB68
+	.long	.LCFI121-.LFB68
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI120-.LCFI119
+	.long	.LCFI122-.LCFI121
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI121-.LCFI120
+	.long	.LCFI123-.LCFI122
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22838,7 +22853,7 @@
 	.long	.LFE48-.LFB48
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI122-.LFB48
+	.long	.LCFI124-.LFB48
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x83
@@ -22853,7 +22868,7 @@
 	.long	.LFE61-.LFB61
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI123-.LFB61
+	.long	.LCFI125-.LFB61
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -22866,15 +22881,15 @@
 	.long	.LFE76-.LFB76
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI124-.LFB76
+	.long	.LCFI126-.LFB76
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI125-.LCFI124
+	.long	.LCFI127-.LCFI126
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI126-.LCFI125
+	.long	.LCFI128-.LCFI127
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22891,15 +22906,15 @@
 	.long	.LFE138-.LFB138
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI127-.LFB138
+	.long	.LCFI129-.LFB138
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI128-.LCFI127
+	.long	.LCFI130-.LCFI129
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI129-.LCFI128
+	.long	.LCFI131-.LCFI130
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22916,31 +22931,31 @@
 	.long	.LFE126-.LFB126
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI130-.LFB126
+	.long	.LCFI132-.LFB126
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI131-.LCFI130
+	.long	.LCFI133-.LCFI132
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI132-.LCFI131
+	.long	.LCFI134-.LCFI133
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI133-.LCFI132
+	.long	.LCFI135-.LCFI134
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI134-.LCFI133
+	.long	.LCFI136-.LCFI135
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI135-.LCFI134
+	.long	.LCFI137-.LCFI136
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI136-.LCFI135
+	.long	.LCFI138-.LCFI137
 	.byte	0xe
 	.uleb128 0x180
 	.byte	0x83
@@ -22965,15 +22980,15 @@
 	.long	.LFE130-.LFB130
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI137-.LFB130
+	.long	.LCFI139-.LFB130
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI138-.LCFI137
+	.long	.LCFI140-.LCFI139
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI139-.LCFI138
+	.long	.LCFI141-.LCFI140
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -22990,23 +23005,23 @@
 	.long	.LFE94-.LFB94
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI140-.LFB94
+	.long	.LCFI142-.LFB94
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI141-.LCFI140
+	.long	.LCFI143-.LCFI142
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI142-.LCFI141
+	.long	.LCFI144-.LCFI143
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI143-.LCFI142
+	.long	.LCFI145-.LCFI144
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI144-.LCFI143
+	.long	.LCFI146-.LCFI145
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x83
@@ -23027,23 +23042,23 @@
 	.long	.LFE96-.LFB96
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI145-.LFB96
+	.long	.LCFI147-.LFB96
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI146-.LCFI145
+	.long	.LCFI148-.LCFI147
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI147-.LCFI146
+	.long	.LCFI149-.LCFI148
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI148-.LCFI147
+	.long	.LCFI150-.LCFI149
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI149-.LCFI148
+	.long	.LCFI151-.LCFI150
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x83
@@ -23066,23 +23081,23 @@
 	.long	.LFE97-.LFB97
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI150-.LFB97
+	.long	.LCFI152-.LFB97
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI151-.LCFI150
+	.long	.LCFI153-.LCFI152
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI152-.LCFI151
+	.long	.LCFI154-.LCFI153
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI153-.LCFI152
+	.long	.LCFI155-.LCFI154
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI154-.LCFI153
+	.long	.LCFI156-.LCFI155
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x83
@@ -23105,31 +23120,31 @@
 	.long	.LFE75-.LFB75
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI155-.LFB75
+	.long	.LCFI157-.LFB75
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI156-.LCFI155
+	.long	.LCFI158-.LCFI157
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI157-.LCFI156
+	.long	.LCFI159-.LCFI158
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI158-.LCFI157
+	.long	.LCFI160-.LCFI159
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI159-.LCFI158
+	.long	.LCFI161-.LCFI160
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI160-.LCFI159
+	.long	.LCFI162-.LCFI161
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI161-.LCFI160
+	.long	.LCFI163-.LCFI162
 	.byte	0xe
 	.uleb128 0x70
 	.byte	0x83
@@ -23154,15 +23169,15 @@
 	.long	.LFE100-.LFB100
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI162-.LFB100
+	.long	.LCFI164-.LFB100
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI163-.LCFI162
+	.long	.LCFI165-.LCFI164
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI164-.LCFI163
+	.long	.LCFI166-.LCFI165
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -23181,7 +23196,7 @@
 	.long	.LFE71-.LFB71
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI165-.LFB71
+	.long	.LCFI167-.LFB71
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -23194,15 +23209,15 @@
 	.long	.LFE67-.LFB67
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI166-.LFB67
+	.long	.LCFI168-.LFB67
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI167-.LCFI166
+	.long	.LCFI169-.LCFI168
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI168-.LCFI167
+	.long	.LCFI170-.LCFI169
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -23219,15 +23234,15 @@
 	.long	.LFE64-.LFB64
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI169-.LFB64
+	.long	.LCFI171-.LFB64
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI170-.LCFI169
+	.long	.LCFI172-.LCFI171
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI171-.LCFI170
+	.long	.LCFI173-.LCFI172
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x83
@@ -23246,7 +23261,7 @@
 	.long	.LFE78-.LFB78
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI172-.LFB78
+	.long	.LCFI174-.LFB78
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -23259,7 +23274,7 @@
 	.long	.LFE77-.LFB77
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI173-.LFB77
+	.long	.LCFI175-.LFB77
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -23272,31 +23287,31 @@
 	.long	.LFE74-.LFB74
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI174-.LFB74
+	.long	.LCFI176-.LFB74
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI175-.LCFI174
+	.long	.LCFI177-.LCFI176
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI176-.LCFI175
+	.long	.LCFI178-.LCFI177
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI177-.LCFI176
+	.long	.LCFI179-.LCFI178
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI178-.LCFI177
+	.long	.LCFI180-.LCFI179
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI179-.LCFI178
+	.long	.LCFI181-.LCFI180
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI180-.LCFI179
+	.long	.LCFI182-.LCFI181
 	.byte	0xe
 	.uleb128 0x70
 	.byte	0x83
@@ -23321,7 +23336,7 @@
 	.long	.LFE72-.LFB72
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI184-.LFB72
+	.long	.LCFI186-.LFB72
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x8c
@@ -23340,31 +23355,31 @@
 	.long	.LFE103-.LFB103
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI185-.LFB103
+	.long	.LCFI187-.LFB103
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI186-.LCFI185
+	.long	.LCFI188-.LCFI187
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI187-.LCFI186
+	.long	.LCFI189-.LCFI188
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI188-.LCFI187
+	.long	.LCFI190-.LCFI189
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI189-.LCFI188
+	.long	.LCFI191-.LCFI190
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI190-.LCFI189
+	.long	.LCFI192-.LCFI191
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI191-.LCFI190
+	.long	.LCFI193-.LCFI192
 	.byte	0xe
 	.uleb128 0xc0
 	.byte	0x83
@@ -23389,31 +23404,31 @@
 	.long	.LFE119-.LFB119
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI192-.LFB119
+	.long	.LCFI194-.LFB119
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI193-.LCFI192
+	.long	.LCFI195-.LCFI194
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI194-.LCFI193
+	.long	.LCFI196-.LCFI195
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI195-.LCFI194
+	.long	.LCFI197-.LCFI196
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI196-.LCFI195
+	.long	.LCFI198-.LCFI197
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI197-.LCFI196
+	.long	.LCFI199-.LCFI198
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI198-.LCFI197
+	.long	.LCFI200-.LCFI199
 	.byte	0xe
 	.uleb128 0x40
 	.byte	0x83
@@ -23438,31 +23453,31 @@
 	.long	.LFE113-.LFB113
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI199-.LFB113
+	.long	.LCFI201-.LFB113
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI200-.LCFI199
+	.long	.LCFI202-.LCFI201
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI201-.LCFI200
+	.long	.LCFI203-.LCFI202
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI202-.LCFI201
+	.long	.LCFI204-.LCFI203
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI203-.LCFI202
+	.long	.LCFI205-.LCFI204
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI204-.LCFI203
+	.long	.LCFI206-.LCFI205
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI205-.LCFI204
+	.long	.LCFI207-.LCFI206
 	.byte	0xe
 	.uleb128 0x40
 	.byte	0x83
@@ -23487,31 +23502,31 @@
 	.long	.LFE111-.LFB111
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI206-.LFB111
+	.long	.LCFI208-.LFB111
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI207-.LCFI206
+	.long	.LCFI209-.LCFI208
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI208-.LCFI207
+	.long	.LCFI210-.LCFI209
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI209-.LCFI208
+	.long	.LCFI211-.LCFI210
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI210-.LCFI209
+	.long	.LCFI212-.LCFI211
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI211-.LCFI210
+	.long	.LCFI213-.LCFI212
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI212-.LCFI211
+	.long	.LCFI214-.LCFI213
 	.byte	0xe
 	.uleb128 0x70
 	.byte	0x83
@@ -23536,31 +23551,31 @@
 	.long	.LFE115-.LFB115
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI213-.LFB115
+	.long	.LCFI215-.LFB115
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI214-.LCFI213
+	.long	.LCFI216-.LCFI215
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI215-.LCFI214
+	.long	.LCFI217-.LCFI216
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI216-.LCFI215
+	.long	.LCFI218-.LCFI217
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI217-.LCFI216
+	.long	.LCFI219-.LCFI218
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x4
-	.long	.LCFI218-.LCFI217
+	.long	.LCFI220-.LCFI219
 	.byte	0xe
 	.uleb128 0x38
 	.byte	0x4
-	.long	.LCFI219-.LCFI218
+	.long	.LCFI221-.LCFI220
 	.byte	0xe
 	.uleb128 0x60
 	.byte	0x83
@@ -23585,7 +23600,7 @@
 	.long	.LFE112-.LFB112
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI220-.LFB112
+	.long	.LCFI222-.LFB112
 	.byte	0xe
 	.uleb128 0x10
 	.align 8
@@ -23598,11 +23613,11 @@
 	.long	.LFE114-.LFB114
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI221-.LFB114
+	.long	.LCFI223-.LFB114
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI222-.LCFI221
+	.long	.LCFI224-.LCFI223
 	.byte	0xe
 	.uleb128 0x120
 	.byte	0x83
@@ -23617,23 +23632,23 @@
 	.long	.LFE63-.LFB63
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI223-.LFB63
+	.long	.LCFI225-.LFB63
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI224-.LCFI223
+	.long	.LCFI226-.LCFI225
 	.byte	0xe
 	.uleb128 0x18
 	.byte	0x4
-	.long	.LCFI225-.LCFI224
+	.long	.LCFI227-.LCFI226
 	.byte	0xe
 	.uleb128 0x20
 	.byte	0x4
-	.long	.LCFI226-.LCFI225
+	.long	.LCFI228-.LCFI227
 	.byte	0xe
 	.uleb128 0x28
 	.byte	0x4
-	.long	.LCFI227-.LCFI226
+	.long	.LCFI229-.LCFI228
 	.byte	0xe
 	.uleb128 0x30
 	.byte	0x83
@@ -23654,11 +23669,11 @@
 	.long	.LFE104-.LFB104
 	.uleb128 0x0
 	.byte	0x4
-	.long	.LCFI228-.LFB104
+	.long	.LCFI230-.LFB104
 	.byte	0xe
 	.uleb128 0x10
 	.byte	0x4
-	.long	.LCFI229-.LCFI228
+	.long	.LCFI231-.LCFI230
 	.byte	0xe
 	.uleb128 0x110
 	.byte	0x83
